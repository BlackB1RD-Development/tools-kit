/*! dustjs-linkedin - v2.7.5
* http://dustjs.com/
* Copyright (c) 2016 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define("dust.core",[],b):"object"==typeof exports?module.exports=b():a.dust=b()}(this,function(){function getTemplate(a,b){return a?"function"==typeof a&&a.template?a.template:dust.isTemplateFn(a)?a:b!==!1?dust.cache[a]:void 0:void 0}function load(a,b,c){if(!a)return b.setError(new Error("No template or template name provided to render"));var d=getTemplate(a,dust.config.cache);return d?d(b,Context.wrap(c,d.templateName)):dust.onLoad?b.map(function(b){function d(a,d){var f;if(a)return b.setError(a);if(f=getTemplate(d,!1)||getTemplate(e,dust.config.cache),!f){if(!dust.compile)return b.setError(new Error("Dust compiler not available"));f=dust.loadSource(dust.compile(d,e))}f(b,Context.wrap(c,f.templateName)).end()}var e=a;3===dust.onLoad.length?dust.onLoad(e,c.options,d):dust.onLoad(e,d)}):b.setError(new Error("Template Not Found: "+a))}function Context(a,b,c,d,e){void 0===a||a instanceof Stack||(a=new Stack(a)),this.stack=a,this.global=b,this.options=c,this.blocks=d,this.templateName=e,this._isContext=!0}function getWithResolvedData(a,b,c){return function(d){return a.push(d)._get(b,c)}}function Stack(a,b,c,d){this.tail=b,this.isObject=a&&"object"==typeof a,this.head=a,this.index=c,this.of=d}function Stub(a){this.head=new Chunk(this),this.callback=a,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(a,b,c){this.root=a,this.next=b,this.data=[],this.flushable=!1,this.taps=c}function Tap(a,b){this.head=a,this.tail=b}var dust={version:"2.7.5"},NONE="NONE",ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var a,b,c={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(a=console.log,b="function"==typeof a?function(){a.apply(console,arguments)}:function(){a(Array.prototype.slice.apply(arguments).join(" "))}):b=EMPTY_FUNC,dust.log=function(a,d){d=d||INFO,c[d]>=c[dust.debugLevel]&&b("[DUST:"+d+"]",a)},dust.debugLevel=NONE,"undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(a,b){a&&(b.templateName=a,dust.config.cache!==!1&&(dust.cache[a]=b))},dust.render=function(a,b,c){var d=new Stub(c).head;try{load(a,d,b).end()}catch(e){d.setError(e)}},dust.stream=function(a,b){var c=new Stream,d=c.head;return dust.nextTick(function(){try{load(a,d,b).end()}catch(c){d.setError(c)}}),c},dust.loadSource=function(source){return eval(source)},dust.isArray=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},dust.nextTick=function(){return function(a){setTimeout(a,0)}}(),dust.isEmpty=function(a){return 0===a?!1:dust.isArray(a)&&!a.length?!0:!a},dust.isEmptyObject=function(a){var b;if(null===a)return!1;if(void 0===a)return!1;if(a.length>0)return!1;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b))return!1;return!0},dust.isTemplateFn=function(a){return"function"==typeof a&&a.__dustBody},dust.isThenable=function(a){return a&&"object"==typeof a&&"function"==typeof a.then},dust.isStreamable=function(a){return a&&"function"==typeof a.on&&"function"==typeof a.pipe},dust.filter=function(a,b,c,d){var e,f,g,h;if(c)for(e=0,f=c.length;f>e;e++)g=c[e],g.length&&(h=dust.filters[g],"s"===g?b=null:"function"==typeof h?a=h(a,d):dust.log("Invalid filter `"+g+"`",WARN));return b&&(a=dust.filters[b](a,d)),a},dust.filters={h:function(a){return dust.escapeHtml(a)},j:function(a){return dust.escapeJs(a)},u:encodeURI,uc:encodeURIComponent,js:function(a){return dust.escapeJSON(a)},jp:function(a){return JSON?JSON.parse(a):(dust.log("JSON is undefined; could not parse `"+a+"`",WARN),a)}},dust.makeBase=dust.context=function(a,b){return new Context(void 0,a,b)},dust.isContext=function(a){return"object"==typeof a&&a._isContext===!0},Context.wrap=function(a,b){return dust.isContext(a)?a:new Context(a,{},{},null,b)},Context.prototype.get=function(a,b){return"string"==typeof a&&("."===a[0]&&(b=!0,a=a.substr(1)),a=a.split(".")),this._get(b,a)},Context.prototype._get=function(a,b){var c,d,e,f,g,h=this.stack||{},i=1;if(d=b[0],e=b.length,a&&0===e)f=h,h=h.head;else{if(a)h&&(h=h.head?h.head[d]:void 0);else{for(;h&&(!h.isObject||(f=h.head,c=h.head[d],void 0===c));)h=h.tail;h=void 0!==c?c:this.global&&this.global[d]}for(;h&&e>i;){if(dust.isThenable(h))return h.then(getWithResolvedData(this,a,b.slice(i)));f=h,h=h[b[i]],i++}}return"function"==typeof h?(g=function(){try{return h.apply(f,arguments)}catch(a){throw dust.log(a,ERROR),a}},g.__dustBody=!!h.__dustBody,g):(void 0===h&&dust.log("Cannot find reference `{"+b.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),h)},Context.prototype.getPath=function(a,b){return this._get(a,b)},Context.prototype.push=function(a,b,c){return void 0===a?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(a,this.stack,b,c))},Context.prototype.pop=function(){var a=this.current();return this.stack=this.stack&&this.stack.tail,a},Context.prototype.rebase=function(a){return new Context(a,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var a=this.rebase();return a.stack=this.stack,a},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(a){var b,c,d;if("function"==typeof a&&(a=a(new Chunk,this).data.join("")),b=this.blocks,!b)return dust.log("No blocks for context `"+a+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(c=b.length;c--;)if(d=b[c][a])return d;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(a){var b,c=this.blocks;return a?(b=c?c.concat([a]):[a],new Context(this.stack,this.global,this.options,b,this.getTemplateName())):this},Context.prototype.resolve=function(a){var b;return"function"!=typeof a?a:(b=(new Chunk).render(a,this),b instanceof Chunk?b.data.join(""):b)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.callback(a.error),dust.log("Rendering failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=a.data.join(""),a=a.next,this.head=a}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.emit("error",a.error),this.emit("end"),dust.log("Streaming failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",a.data.join("")),a=a.next,this.head=a}this.emit("end")},Stream.prototype.emit=function(a,b){var c,d,e=this.events||{},f=e[a]||[];if(!f.length)return dust.log("Stream broadcasting, but no listeners for `"+a+"`",DEBUG),!1;for(f=f.slice(0),c=0,d=f.length;d>c;c++)f[c](b);return!0},Stream.prototype.on=function(a,b){var c=this.events=this.events||{},d=c[a]=c[a]||[];return"function"!=typeof b?dust.log("No callback function provided for `"+a+"` event listener",WARN):d.push(b),this},Stream.prototype.pipe=function(a){if("function"!=typeof a.write||"function"!=typeof a.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var b=!1;return"function"==typeof a.emit&&a.emit("pipe",this),"function"==typeof a.on&&a.on("error",function(){b=!0}),this.on("data",function(c){if(!b)try{a.write(c,"utf8")}catch(d){dust.log(d,ERROR)}}).on("end",function(){if(!b)try{a.end(),b=!0}catch(c){dust.log(c,ERROR)}})},Chunk.prototype.write=function(a){var b=this.taps;return b&&(a=b.go(a)),this.data.push(a),this},Chunk.prototype.end=function(a){return a&&this.write(a),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(a){var b=new Chunk(this.root,this.next,this.taps),c=new Chunk(this.root,b,this.taps);this.next=c,this.flushable=!0;try{a(c)}catch(d){dust.log(d,ERROR),c.setError(d)}return b},Chunk.prototype.tap=function(a){var b=this.taps;return this.taps=b?b.push(a):new Tap(a),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(a,b){return a(this,b)},Chunk.prototype.reference=function(a,b,c,d){return"function"==typeof a?(a=a.apply(b.current(),[this,b,null,{auto:c,filters:d}]),a instanceof Chunk?a:this.reference(a,b,c,d)):dust.isThenable(a)?this.await(a,b,null,c,d):dust.isStreamable(a)?this.stream(a,b,null,c,d):dust.isEmpty(a)?this:this.write(dust.filter(a,c,d,b))},Chunk.prototype.section=function(a,b,c,d){var e,f,g,h=c.block,i=c["else"],j=this;if("function"==typeof a&&!dust.isTemplateFn(a)){try{a=a.apply(b.current(),[this,b,c,d])}catch(k){return dust.log(k,ERROR),this.setError(k)}if(a instanceof Chunk)return a}if(dust.isEmptyObject(c))return j;if(dust.isEmptyObject(d)||(b=b.push(d)),dust.isArray(a)){if(h){if(f=a.length,f>0){for(g=b.stack&&b.stack.head||{},g.$len=f,e=0;f>e;e++)g.$idx=e,j=h(j,b.push(a[e],e,f));return g.$idx=void 0,g.$len=void 0,j}if(i)return i(this,b)}}else{if(dust.isThenable(a))return this.await(a,b,c);if(dust.isStreamable(a))return this.stream(a,b,c);if(a===!0){if(h)return h(this,b)}else if(a||0===a){if(h)return h(this,b.push(a))}else if(i)return i(this,b)}return dust.log("Section without corresponding key in template `"+b.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(e)return e(this,b)}else{if(d)return d(this,b);dust.log("No block for exists check in template `"+b.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(d)return d(this,b);dust.log("No block for not-exists check in template `"+b.getTemplateName()+"`",DEBUG)}else if(e)return e(this,b);return this},Chunk.prototype.block=function(a,b,c){var d=a||c.block;return d?d(this,b):this},Chunk.prototype.partial=function(a,b,c,d){var e;return void 0===d&&(d=c,c=b),dust.isEmptyObject(d)||(c=c.clone(),e=c.pop(),c=c.push(d).push(e)),dust.isTemplateFn(a)?this.capture(a,b,function(a,b){c.templateName=a,load(a,b,c).end()}):(c.templateName=a,load(a,this,c))},Chunk.prototype.helper=function(a,b,c,d,e){var f,g=this,h=d.filters;if(void 0===e&&(e="h"),!dust.helpers[a])return dust.log("Helper `"+a+"` does not exist",WARN),g;try{return f=dust.helpers[a](g,b,c,d),f instanceof Chunk?f:("string"==typeof h&&(h=h.split("|")),dust.isEmptyObject(c)?g.reference(f,b,e,h):g.section(f,b,c,d))}catch(i){return dust.log("Error in helper `"+a+"`: "+i.message,ERROR),g.setError(i)}},Chunk.prototype.await=function(a,b,c,d,e){return this.map(function(f){a.then(function(a){f=c?f.section(a,b,c):f.reference(a,b,d,e),f.end()},function(a){var d=c&&c.error;d?f.render(d,b.push(a)).end():(dust.log("Unhandled promise rejection in `"+b.getTemplateName()+"`",INFO),f.end())})})},Chunk.prototype.stream=function(a,b,c,d,e){var f=c&&c.block,g=c&&c.error;return this.map(function(h){var i=!1;a.on("data",function(a){i||(f?h=h.map(function(c){c.render(f,b.push(a)).end()}):c||(h=h.reference(a,b,d,e)))}).on("error",function(a){i||(g?h.render(g,b.push(a)):dust.log("Unhandled stream error in `"+b.getTemplateName()+"`",INFO),i||(i=!0,h.end()))}).on("end",function(){i||(i=!0,h.end())})})},Chunk.prototype.capture=function(a,b,c){return this.map(function(d){var e=new Stub(function(a,b){a?d.setError(a):c(b,d)});a(e.head,b).end()})},Chunk.prototype.setError=function(a){return this.error=a,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(a){return new Tap(a,this)},Tap.prototype.go=function(a){for(var b=this;b;)a=b.head(a),b=b.tail;return a};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(a){return"string"==typeof a||a&&"function"==typeof a.toString?("string"!=typeof a&&(a=a.toString()),HCHARS.test(a)?a.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):a):a};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(a){return"string"==typeof a?a.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):a},dust.escapeJSON=function(a){return JSON?JSON.stringify(a).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+a+"`",WARN),a)},dust}),"function"==typeof define&&define.amd&&define.amd.dust===!0&&define(["require","dust.core"],function(require,dust){return dust.onLoad=function(a,b){require([a],function(){b()})},dust});
/*! dustjs-helpers - v1.7.4
* http://dustjs.com/
* Copyright (c) 2017 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define(["dust.core"],b):"object"==typeof exports?(module.exports=b(require("dustjs-linkedin")),module.exports.registerWith=b):b(a.dust)}(this,function(dust){function a(a,b,c){c=c||"INFO",a=a?"{@"+a+"}: ":"",dust.log(a+b,c)}function b(b){k[b]||(a(b,"Deprecation warning: "+b+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),a(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+b.replace(/\W+/g,""),"WARN"),k[b]=!0)}function c(a){return a.stack.tail&&a.stack.tail.head&&"undefined"!=typeof a.stack.tail.head.__select__}function d(a){return c(a)&&a.get("__select__")}function e(a,b){var c,d=a.stack.head,e=a.rebase();a.stack&&a.stack.tail&&(e.stack=a.stack.tail);var f={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(c in b)f[c]=b[c];return e.push({__select__:f}).push(d,a.stack.index,a.stack.of)}function f(a){var b,c;if(a.isDeferredPending=!0,a.deferreds.length)for(a.isDeferredComplete=!0,b=0,c=a.deferreds.length;c>b;b++)a.deferreds[b]();a.isDeferredPending=!1}function g(a,b){return"function"==typeof b?b.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):b}function h(a,b){return function(c,d,e,f){return i(c,d,e,f,a,b)}}function i(b,c,e,f,g,h){var i,k,l,m,n=e.block,o=e["else"],p=d(c)||{};if(p.isResolved&&!p.isDeferredPending)return b;if(f.hasOwnProperty("key"))k=f.key;else{if(!p.hasOwnProperty("key"))return a(g,"No key specified","WARN"),b;k=p.key}return m=f.type||p.type,k=j(c.resolve(k),m),l=j(c.resolve(f.value),m),h(k,l)?(p.isPending||(i=!0,p.isPending=!0),n&&(b=b.render(n,c)),i&&(p.isResolved=!0)):o&&(b=b.render(o,c)),b}function j(a,b){switch(b&&(b=b.toLowerCase()),b){case"number":return+a;case"string":return String(a);case"boolean":return a="false"===a?!1:a,Boolean(a);case"date":return new Date(a)}return a}var k={},l={tap:function(a,c,d){return b("tap"),d.resolve(a)},sep:function(a,b,c){var d=c.block;return b.stack.index===b.stack.of-1?a:d?d(a,b):a},first:function(a,b,c){return 0===b.stack.index?c.block(a,b):a},last:function(a,b,c){return b.stack.index===b.stack.of-1?c.block(a,b):a},contextDump:function(b,c,d,e){var f,h,i=c.resolve(e.to),j=c.resolve(e.key);switch(j){case"full":f=c.stack;break;default:f=c.stack.head}switch(h=JSON.stringify(f,g,2),i){case"console":a("contextDump",h);break;default:h=h.replace(/</g,"\\u003c"),b=b.write(h)}return b},math:function(b,c,g,h){var i,j=h.key,k=h.method,l=h.operand,m=h.round;if(!h.hasOwnProperty("key")||!h.method)return a("math","`key` or `method` was not provided","ERROR"),b;switch(j=parseFloat(c.resolve(j)),l=parseFloat(c.resolve(l)),k){case"mod":0===l&&a("math","Division by 0","ERROR"),i=j%l;break;case"add":i=j+l;break;case"subtract":i=j-l;break;case"multiply":i=j*l;break;case"divide":0===l&&a("math","Division by 0","ERROR"),i=j/l;break;case"ceil":case"floor":case"round":case"abs":i=Math[k](j);break;case"toint":i=parseInt(j,10);break;default:a("math","Method `"+k+"` is not supported","ERROR")}return"undefined"!=typeof i&&(m&&(i=Math.round(i)),g&&g.block?(c=e(c,{key:i}),b=b.render(g.block,c),f(d(c))):b=b.write(i)),b},select:function(b,c,g,h){var i=g.block,j={};return h.hasOwnProperty("key")&&(j.key=c.resolve(h.key)),h.hasOwnProperty("type")&&(j.type=h.type),i?(c=e(c,j),b=b.render(i,c),f(d(c))):a("select","Missing body block","WARN"),b},eq:h("eq",function(a,b){return a===b}),ne:h("ne",function(a,b){return a!==b}),lt:h("lt",function(a,b){return b>a}),lte:h("lte",function(a,b){return b>=a}),gt:h("gt",function(a,b){return a>b}),gte:h("gte",function(a,b){return a>=b}),any:function(b,c,e){var f=d(c);return f?f.isDeferredComplete?a("any","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){f.deferreds.push(function(){f.isResolved&&(a=a.render(e.block,c)),a.end()})}):a("any","Must be used inside a {@select} block","ERROR"),b},none:function(b,c,e){var f=d(c);return f?f.isDeferredComplete?a("none","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){f.deferreds.push(function(){f.isResolved||(a=a.render(e.block,c)),a.end()})}):a("none","Must be used inside a {@select} block","ERROR"),b},size:function(a,b,c,d){var e,f,g=d.key;if(g=b.resolve(d.key),g&&g!==!0)if(dust.isArray(g))e=g.length;else if(!isNaN(parseFloat(g))&&isFinite(g))e=g;else if("object"==typeof g){e=0;for(f in g)g.hasOwnProperty(f)&&e++}else e=(g+"").length;else e=0;return a.write(e)}};for(var m in l)dust.helpers[m]=l[m];return dust});
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.page=e()}(this,function(){"use strict";function t(t){return a(i(t))}var p=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},n=h,e=i,r=a,o=s,u=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(t){for(var e=[],n=0,r=0,o="";null!=(a=u.exec(t));){var i,a,c,s=a[0],h=a[1],p=a.index;o+=t.slice(r,p),r=p+s.length,h?o+=h[1]:(o&&(e.push(o),o=""),c=a[2],i=a[3],p=a[4],s=a[5],h=a[6],a=a[7],e.push({name:i||n++,prefix:c||"",delimiter:c=c||"/",optional:"?"===h||"*"===h,repeat:"+"===h||"*"===h,pattern:(p||s||(a?".*":"[^"+c+"]+?")).replace(/([=!:$\/()])/g,"\\$1")}))}return r<t.length&&(o+=t.substr(r)),o&&e.push(o),e}function a(s){for(var h=new Array(s.length),t=0;t<s.length;t++)"object"==typeof s[t]&&(h[t]=new RegExp("^"+s[t].pattern+"$"));return function(t){for(var e="",n=t||{},r=0;r<s.length;r++){var o=s[r];if("string"!=typeof o){var i,a=n[o.name];if(null==a){if(o.optional)continue;throw new TypeError('Expected "'+o.name+'" to be defined')}if(p(a)){if(!o.repeat)throw new TypeError('Expected "'+o.name+'" to not repeat, but received "'+a+'"');if(0===a.length){if(o.optional)continue;throw new TypeError('Expected "'+o.name+'" to not be empty')}for(var c=0;c<a.length;c++){if(i=encodeURIComponent(a[c]),!h[r].test(i))throw new TypeError('Expected all "'+o.name+'" to match "'+o.pattern+'", but received "'+i+'"');e+=(0===c?o.prefix:o.delimiter)+i}}else{if(i=encodeURIComponent(a),!h[r].test(i))throw new TypeError('Expected "'+o.name+'" to match "'+o.pattern+'", but received "'+i+'"');e+=o.prefix+i}}else e+=o}return e}}function f(t){return t.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function c(t,e){return t.keys=e,t}function l(t){return t.sensitive?"":"i"}function s(t,e){for(var n=(e=e||{}).strict,r=!1!==e.end,o="",i=t[t.length-1],i="string"==typeof i&&/\/$/.test(i),a=0;a<t.length;a++){var c,s,h=t[a];"string"==typeof h?o+=f(h):(c=f(h.prefix),s=h.pattern,h.repeat&&(s+="(?:"+c+s+")*"),o+=s=h.optional?c?"(?:"+c+"("+s+"))?":"("+s+")?":c+"("+s+")")}return n||(o=(i?o.slice(0,-2):o)+"(?:\\/(?=$))?"),o+=r?"$":n&&i?"":"(?=\\/|$)",new RegExp("^"+o,l(e))}function h(t,e,n){return p(e=e||[])?n=n||{}:(n=e,e=[]),t instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return c(t,e)}(t,e):(p(t)?function(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(h(t[o],e,n).source);return c(new RegExp("(?:"+r.join("|")+")",l(n)),e)}:function(t,e,n){for(var r=i(t),n=s(r,n),o=0;o<r.length;o++)"string"!=typeof r[o]&&e.push(r[o]);return c(n,e)})(t,e,n)}n.parse=e,n.compile=t,n.tokensToFunction=r,n.tokensToRegExp=o;o=C;(C.default=C).Context=U,C.Route=P,C.sameOrigin=j;var d,m,v,g="undefined"!=typeof document,y="undefined"!=typeof window,w="undefined"!=typeof history,x="undefined"!=typeof process,b=g&&document.ontouchstart?"touchstart":"click",E=y&&!(!window.history.location&&!window.location),R=!0,k=!0,A="",T=!1,O=!1;function C(t,e){if("function"==typeof t)return C("*",t);if("function"==typeof e)for(var n=new P(t),r=1;r<arguments.length;++r)C.callbacks.push(n.middleware(arguments[r]));else"string"==typeof t?C["string"==typeof e?"redirect":"show"](t,e):C.start(t)}function L(t){return"string"==typeof t&&k?decodeURIComponent(t.replace(/\+/g," ")):t}function U(t,e){var n=N(),r=(t="/"===t[0]&&0!==t.indexOf(n)?n+(O?"#!":"")+t:t).indexOf("?");this.canonicalPath=t,this.path=t.replace(n,"")||"/",O&&(this.path=this.path.replace("#!","")||"/"),this.title=g&&v.document.title,this.state=e||{},this.state.path=t,this.querystring=~r?L(t.slice(r+1)):"",this.pathname=L(~r?t.slice(0,r):t),this.params={},this.hash="",O||~this.path.indexOf("#")&&(t=this.path.split("#"),this.path=this.pathname=t[0],this.hash=L(t[1])||"",this.querystring=this.querystring.split("#")[0])}function P(t,e){(e=e||{}).strict=e.strict||T,this.path="*"===t?"(.*)":t,this.method="GET",this.regexp=n(this.path,this.keys=[],e)}C.callbacks=[],C.exits=[],C.current="",C.len=0,C.base=function(t){if(0===arguments.length)return A;A=t},C.strict=function(t){if(0===arguments.length)return T;T=t},C.start=function(t){var e;t=t||{},d||(d=!0,v=t.window||y&&window,!1===t.dispatch&&(R=!1),!1===t.decodeURLComponents&&(k=!1),!1!==t.popstate&&y&&v.addEventListener("popstate",S,!1),!1!==t.click&&g&&v.document.addEventListener(b,$,!1),(O=!!t.hashbang)&&y&&!w&&v.addEventListener("hashchange",S,!1),R&&(E&&(e=v.location,e=O&&~e.hash.indexOf("#!")?e.hash.substr(2)+e.search:O?e.search+e.hash:e.pathname+e.search+e.hash),C.replace(e,null,!0,R)))},C.stop=function(){d&&(C.current="",C.len=0,d=!1,g&&v.document.removeEventListener(b,$,!1),y&&v.removeEventListener("popstate",S,!1),y&&v.removeEventListener("hashchange",S,!1))},C.show=function(t,e,n,r){t=new U(t,e),e=m;return m=t,C.current=t.path,!1!==n&&C.dispatch(t,e),!1!==t.handled&&!1!==r&&t.pushState(),t},C.back=function(t,e){0<C.len?(w&&v.history.back(),C.len--):t?setTimeout(function(){C.show(t,e)}):setTimeout(function(){C.show(N(),e)})},C.redirect=function(t,e){"string"==typeof t&&"string"==typeof e&&C(t,function(t){setTimeout(function(){C.replace(e)},0)}),"string"==typeof t&&void 0===e&&setTimeout(function(){C.replace(t)},0)},C.replace=function(t,e,n,r){t=new U(t,e),e=m;return m=t,C.current=t.path,t.init=n,t.save(),!1!==r&&C.dispatch(t,e),t},C.dispatch=function(e,n){var r=0,o=0;function i(){var t=C.callbacks[r++];{if(e.path===C.current)return t?void t(e,i):void((t=e).handled||(O?E&&N()+v.location.hash.replace("#!",""):E&&v.location.pathname+v.location.search)!==t.canonicalPath&&(C.stop(),t.handled=!1,E&&(v.location.href=t.canonicalPath)));e.handled=!1}}(n?function t(){var e=C.exits[o++];if(!e)return i();e(n,t)}:i)()},C.exit=function(t,e){if("function"==typeof t)return C.exit("*",t);for(var n=new P(t),r=1;r<arguments.length;++r)C.exits.push(n.middleware(arguments[r]))},(C.Context=U).prototype.pushState=function(){C.len++,w&&v.history.pushState(this.state,this.title,O&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},U.prototype.save=function(){w&&"file:"!==v.location.protocol&&v.history.replaceState(this.state,this.title,O&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},(C.Route=P).prototype.middleware=function(n){var r=this;return function(t,e){if(r.match(t.path,t.params))return n(t,e);e()}},P.prototype.match=function(t,e){var n=this.keys,r=t.indexOf("?"),t=~r?t.slice(0,r):t,o=this.regexp.exec(decodeURIComponent(t));if(!o)return!1;for(var i=1,a=o.length;i<a;++i){var c=n[i-1],s=L(o[i]);void 0===s&&hasOwnProperty.call(e,c.name)||(e[c.name]=s)}return!0};var S=function(){var n=!1;if(y)return g&&"complete"===document.readyState?n=!0:window.addEventListener("load",function(){setTimeout(function(){n=!0},0)}),function(t){var e;n&&(t.state?(e=t.state.path,C.replace(e,t.state)):E&&(t=v.location,C.show(t.pathname+t.hash,void 0,void 0,!1)))}}();function $(t){if(1===(null==(e=(e=t)||y&&window.event).which?e.button:e.which)&&!(t.metaKey||t.ctrlKey||t.shiftKey||t.defaultPrevented)){var e,n,r,o=t.target,i=t.path||(t.composedPath?t.composedPath():null);if(i)for(var a=0;a<i.length;a++)if(i[a].nodeName&&"A"===i[a].nodeName.toUpperCase()&&i[a].href){o=i[a];break}for(;o&&"A"!==o.nodeName.toUpperCase();)o=o.parentNode;o&&"A"===o.nodeName.toUpperCase()&&(r="object"==typeof o.href&&"SVGAnimatedString"===o.href.constructor.name,o.hasAttribute("download")||"external"===o.getAttribute("rel")||(n=o.getAttribute("href"),!O&&function(t){if(!E)return!1;var e=v.location;return t.pathname===e.pathname&&t.search===e.search}(o)&&(o.hash||"#"===n)||n&&-1<n.indexOf("mailto:")||(r?o.target.baseVal:o.target)||(r||j(o.href))&&(e="/"!==(e=r?o.href.baseVal:o.pathname+o.search+(o.hash||""))[0]?"/"+e:e,n=e=x&&e.match(/^\/[a-zA-Z]:\//)?e.replace(/^\/[a-zA-Z]:\//,"/"):e,r=N(),0===e.indexOf(r)&&(e=e.substr(A.length)),O&&(e=e.replace("#!","")),r&&n===e||(t.preventDefault(),C.show(n)))))}}function j(t){if(!t||!E)return!1;var e=function(t){if("function"==typeof URL&&E)return new URL(t,location.toString());if(g){var e=document.createElement("a");return e.href=t,e}}(t),t=v.location;return t.protocol===e.protocol&&t.hostname===e.hostname&&t.port===e.port}function N(){if(A)return A;var t=y&&v&&v.location;return y&&O&&t&&"file:"===t.protocol?t.pathname:A}return C.sameOrigin=j,o});
/*!
 * EventEmitter v5.2.4 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */
!function(e){"use strict";function t(){}function n(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function r(e){return function(){return this[e].apply(this,arguments)}}function i(e){return"function"==typeof e||e instanceof RegExp||!(!e||"object"!=typeof e)&&i(e.listener)}var s=t.prototype,o=e.EventEmitter;s.getListeners=function(e){var t,n,r=this._getEvents();if(e instanceof RegExp){t={};for(n in r)r.hasOwnProperty(n)&&e.test(n)&&(t[n]=r[n])}else t=r[e]||(r[e]=[]);return t},s.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},s.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},s.addListener=function(e,t){if(!i(t))throw new TypeError("listener must be a function");var r,s=this.getListenersAsObject(e),o="object"==typeof t;for(r in s)s.hasOwnProperty(r)&&n(s[r],t)===-1&&s[r].push(o?t:{listener:t,once:!1});return this},s.on=r("addListener"),s.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},s.once=r("addOnceListener"),s.defineEvent=function(e){return this.getListeners(e),this},s.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},s.removeListener=function(e,t){var r,i,s=this.getListenersAsObject(e);for(i in s)s.hasOwnProperty(i)&&(r=n(s[i],t),r!==-1&&s[i].splice(r,1));return this},s.off=r("removeListener"),s.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},s.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},s.manipulateListeners=function(e,t,n){var r,i,s=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(r=n.length;r--;)s.call(this,t,n[r]);else for(r in t)t.hasOwnProperty(r)&&(i=t[r])&&("function"==typeof i?s.call(this,r,i):o.call(this,r,i));return this},s.removeEvent=function(e){var t,n=typeof e,r=this._getEvents();if("string"===n)delete r[e];else if(e instanceof RegExp)for(t in r)r.hasOwnProperty(t)&&e.test(t)&&delete r[t];else delete this._events;return this},s.removeAllListeners=r("removeEvent"),s.emitEvent=function(e,t){var n,r,i,s,o,u=this.getListenersAsObject(e);for(s in u)if(u.hasOwnProperty(s))for(n=u[s].slice(0),i=0;i<n.length;i++)r=n[i],r.once===!0&&this.removeListener(e,r.listener),o=r.listener.apply(this,t||[]),o===this._getOnceReturnValue()&&this.removeListener(e,r.listener);return this},s.trigger=r("emitEvent"),s.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},s.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},s._getOnceReturnValue=function(){return!this.hasOwnProperty("_onceReturnValue")||this._onceReturnValue},s._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return e.EventEmitter=o,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:e.EventEmitter=t}(this||{});
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.<br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar","enabled"]),ctx,{"block":body_1},{}).w("<div id=\"page-content-wrapper\"><div class=\"container\"><br />").s(ctx.get(["documentation"], false),ctx,{"block":body_2},{}).w("<br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://onury.io/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class='").h("eq",ctx,{"block":body_1},{"key":ctx.getPath(false, ["currentRoute","sourceType"]),"value":"md"},"h").w("'><div id=\"docma-content\"></div>").h("eq",ctx,{"block":body_2},{"key":ctx.getPath(false, ["currentRoute","sourceType"]),"value":"md"},"h").w("</div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("container container-boxed");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://onury.io/docma\">Docma</a></b>.</span>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.h("eq",ctx,{"else":body_2,"block":body_4},{"key":ctx.getPath(false, ["template","options","symbols","enums"]),"value":"table"},"h");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div class=\"space-top-sm space-bottom-xs fw-bold\">Enumeration</div><ul class=\"param-list\">").s(ctx.get(["$members"], false),ctx,{"block":body_3},{}).w("</ul>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<li><div class=\"param-meta clearfix\"><span class=\"inline-block space-right-sm\"><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code>&nbsp;:&nbsp;<code>").f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></span><span class=\"param-info-box\"><span class=\"param-info value\">Value:&nbsp;</span><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></span></div><div class=\"param-desc\">").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</div></li>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_5},{}).w("</tbody></table>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar","enabled"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar ").x(ctx.getPath(false, ["template","options","navbar","dark"]),ctx,{"block":body_2},{}).w("\"><div class=\"navbar-inner ").x(ctx.get(["boxed"], false),ctx,{"block":body_3},{}).w("\"><div class=\"navbar-brand\">").x(ctx.getPath(false, ["template","options","logo","dark"]),ctx,{"block":body_4},{}).w("<span class=\"navbar-title\"><a href=\"").f(ctx.getPath(false, ["template","options","title","href"]),ctx,"h").w("\">").f(ctx.getPath(false, ["template","options","title","label"]),ctx,"h").w("</a></span></div>").h("gt",ctx,{"block":body_7},{"key":ctx.getPath(false, ["template","options","navbar","menu","length"]),"value":0},"h").w("</div></nav>").x(ctx.getPath(false, ["template","options","navbar","fixed"]),ctx,{"block":body_16},{}).w("<div class=\"nav-overlay\"></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("dark");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar","dark"]),ctx,{"else":body_5,"block":body_6},{});}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<img src=\"").f(ctx.getPath(false, ["template","options","logo","dark"]),ctx,"h").w("\" alt=\"logo\" class=\"navbar-logo\" />");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<img src=\"").f(ctx.getPath(false, ["template","options","logo","light"]),ctx,"h").w("\" alt=\"logo\" class=\"navbar-logo\" />");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<div class=\"navbar-menu-btn\" tabindex=\"0\"><i class=\"fas fa-lg fa-bars trans-all-ease\"></i><i class=\"fas fa-md fa-times trans-all-ease\"></i></div><div class=\"navbar-menu\"><ul class=\"navbar-list\">").s(ctx.getPath(false, ["template","options","navbar","menu"]),ctx,{"block":body_8},{}).w("</ul></div>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_9,"block":body_10},{});}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_11,"block":body_12},{}).w("\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"nav-icon ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>").x(ctx.get(["label"], false),ctx,{"block":body_13},{}).x(ctx.get(["chevron"], false),ctx,{"block":body_14},{}).w("</a><ul>").s(ctx.get(["items"], false),ctx,{"block":body_15},{}).w("</ul></li>");}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("#");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.w("<span class=\"nav-label\">").f(ctx.get(["label"], false),ctx,"h").w("</span>");}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.w("<i class=\"nav-arrow fas fa-sm fa-angle-down\"></i>");}body_14.__dustBody=!0;function body_15(chk,ctx){return chk.w(" ").p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{}).w(" ");}body_15.__dustBody=!0;function body_16(chk,ctx){return chk.w("<div class=\"nav-spacer\"></div>");}body_16.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_6},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).x(ctx.get(["label"], false),ctx,{"block":body_5},{}).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"nav-icon ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<span class=\"nav-label\">").f(ctx.get(["label"], false),ctx,"h",["s"]).w("</span>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_6.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.h("eq",ctx,{"else":body_2,"block":body_8},{"key":ctx.getPath(false, ["template","options","symbols","params"]),"value":"table"},"h");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div class=\"space-top-sm space-bottom-xs fw-bold\">Parameters</div><ul class=\"param-list\">").s(ctx.get(["params"], false),ctx,{"block":body_3},{}).w("</ul>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<li><div class=\"param-meta clearfix\"><span class=\"inline-block space-right-sm\"><code>").x(ctx.get(["variable"], false),ctx,{"block":body_4},{}).f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code>&nbsp;:&nbsp;<code>").x(ctx.get(["variable"], false),ctx,{"block":body_5},{}).f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></span><span class=\"param-info-box\">").x(ctx.get(["optional"], false),ctx,{"else":body_6,"block":body_7},{}).w("</span></div><div class=\"param-desc\">").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</div></li>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("...");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("...");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<span class=\"param-info required boxed\">Required</span>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<span class=\"param-info default\">Default:&nbsp;</span><code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_9},{}).w("</tbody></table>");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.w("<tr><td><code>").x(ctx.get(["variable"], false),ctx,{"block":body_10},{}).f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").x(ctx.get(["variable"], false),ctx,{"block":body_11},{}).f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"else":body_12,"block":body_13},{}).f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("...");}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("...");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<span class=\"param-info required boxed\">Required</span>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.w("<span class=\"param-info default boxed\">Default</span><span class=\"color-gray\">:</span><code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_13.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.h("eq",ctx,{"else":body_2,"block":body_4},{"key":ctx.getPath(false, ["template","options","symbols","props"]),"value":"table"},"h");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div class=\"space-top-sm space-bottom-xs fw-bold\">Properties</div><ul class=\"param-list\">").s(ctx.get(["properties"], false),ctx,{"block":body_3},{}).w("</ul>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<li><div class=\"param-meta clearfix\"><span class=\"inline-block space-right-sm\"><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code>&nbsp;:&nbsp;<code>").f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></span></div><div class=\"param-desc\">").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</div></li>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_5},{}).w("</tbody></table>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["s","$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div id=\"sidebar-toggle\"><i class=\"fas fa-lg fa-bars trans-all-ease\"></i></div><div class=\"sidebar-brand\">").x(ctx.getPath(false, ["template","options","logo","light"]),ctx,{"block":body_1},{}).w("<span class=\"sidebar-title\"><a href=\"").f(ctx.getPath(false, ["template","options","title","href"]),ctx,"h").w("\">").f(ctx.getPath(false, ["template","options","title","label"]),ctx,"h").w("</a></span></div>").x(ctx.getPath(false, ["template","options","sidebar","search"]),ctx,{"block":body_2},{}).x(ctx.getPath(false, ["template","options","sidebar","toolbar"]),ctx,{"block":body_3},{}).w("</div><div class=\"sidebar-nav-container\"><ul class=\"sidebar-nav\">").f(ctx.get(["symbols"], false),ctx,"h",["s","$navnodes"]).w("</ul></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<img src=\"").f(ctx.getPath(false, ["template","options","logo","light"]),ctx,"h").w("\" alt=\"logo\" class=\"sidebar-logo\" />");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div class=\"sidebar-search\"><div class=\"sidebar-search-icon\"><i class=\"fas fa-md fa-search\"></i></div><input id=\"txt-search\" type=\"search\" placeholder=\"Search...\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" /><div class=\"sidebar-search-clean\"><i class=\"fas fa-lg fa-times-circle\"></i></div></div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<div class=\"sidebar-toolbar\"><div class=\"toolbar-scope-filters\"></div><div class=\"toolbar-kind-filters\"></div><div class=\"toolbar-buttons\"><span class=\"btn-switch-fold inline-block\" title=\"Fold Symbols\">").h("eq",ctx,{"else":body_4,"block":body_5},{"key":ctx.getPath(false, ["template","options","sidebar","itemsFolded"]),"type":"boolean","value":"true"},"h").w("</span><span class=\"btn-switch-outline inline-block space-left-xs\" title=\"Toggle Outline\">").h("eq",ctx,{"else":body_6,"block":body_7},{"key":ctx.getPath(false, ["template","options","sidebar","outline"]),"type":"string","value":"tree"},"h").w("</span></div></div>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"far fa-lg fa-caret-square-down\"></i>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<i class=\"far fa-lg fa-caret-square-right\"></i>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<i class=\"fas fa-lg fa-outdent\"></i>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<i class=\"fas fa-lg fa-indent\"></i>");}body_7.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.nx(ctx.getPath(false, ["symbol","$hide"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div id=\"").f(ctx.get(["symbol"], false),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.get(["symbol"], false),ctx,"h",["$id"]).w("\"><i class=\"fas fa-link color-gray-light\" aria-hidden=\"true\"></i></a><code class=\"symbol-name\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.get(["symbol"], false),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$type"]).w("</code>").f(ctx.get(["symbol"], false),ctx,"h",["s","$tags"]).w("</div></div><div class=\"symbol-definition\"><div class=\"symbol-info\">").x(ctx.getPath(false, ["symbol","alias"]),ctx,{"block":body_2},{}).x(ctx.getPath(false, ["symbol","augments"]),ctx,{"block":body_4},{}).x(ctx.getPath(false, ["symbol","version"]),ctx,{"block":body_5},{}).x(ctx.getPath(false, ["symbol","since"]),ctx,{"block":body_6},{}).x(ctx.getPath(false, ["symbol","copyright"]),ctx,{"block":body_7},{}).x(ctx.getPath(false, ["symbol","author"]),ctx,{"block":body_8},{}).x(ctx.getPath(false, ["symbol","license"]),ctx,{"block":body_9},{}).w("</div>").x(ctx.getPath(false, ["symbol","defaultvalue"]),ctx,{"block":body_10},{}).f(ctx.get(["symbol"], false),ctx,"h",["s","$desc"]).x(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_11},{}).h("ne",ctx,{"block":body_16},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","fires"]),ctx,{"block":body_19},{}).x(ctx.getPath(false, ["symbol","returns"]),ctx,{"block":body_21},{}).x(ctx.getPath(false, ["symbol","generator"]),ctx,{"block":body_24},{}).x(ctx.getPath(false, ["symbol","exceptions"]),ctx,{"block":body_28},{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_31},{}).x(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_32},{}).x(ctx.getPath(false, ["template","options","symbols","meta"]),ctx,{"block":body_35},{}).w("</div></div><hr />").x(ctx.getPath(false, ["symbol","$constructor"]),ctx,{"block":body_39},{}).nx(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_41},{});}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.nx(ctx.get(["$constructor"], false),ctx,{"block":body_3},{});}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<p><b class=\"caption\">Alias:</b> <code>").f(ctx.getPath(false, ["symbol","alias"]),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<p><b class=\"caption\">Extends:</b> ").f(ctx.get(["symbol"], false),ctx,"h",["s","$extends"]).w("</p>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<p><b class=\"caption\">Version:</b>&nbsp;").f(ctx.getPath(false, ["symbol","version"]),ctx,"h",["s"]).w("</p>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<p><b class=\"caption\">Since:</b>&nbsp;").f(ctx.getPath(false, ["symbol","since"]),ctx,"h",["s"]).w("</p>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<p><b class=\"caption\">Copyright:</b>&nbsp;").f(ctx.getPath(false, ["symbol","copyright"]),ctx,"h",["s"]).w("</p>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b class=\"caption\">Author:</b>&nbsp;").f(ctx.getPath(false, ["symbol","author"]),ctx,"h",["s","$author"]).w("</p>");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.w("<p><b class=\"caption\">License:</b>&nbsp;").f(ctx.getPath(false, ["symbol","license"]),ctx,"h",["s"]).w("</p>");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("<p class=\"symbol-def-val\"><b class=\"caption\"><i>Value:</i></b>&nbsp;<code>").f(ctx.get(["symbol"], false),ctx,"h",["$def"]).w("</code></p>");}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("<p class=\"no-margin\"><b>See</b>").h("gt",ctx,{"else":body_12,"block":body_14},{"key":ctx.getPath(false, ["symbol","see","length"]),"value":1},"h").w("</p>");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_13},{});}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.w("<ul>").s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_15},{}).w("</ul>");}body_14.__dustBody=!0;function body_15(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_15.__dustBody=!0;function body_16(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.get(["symbol"], false)),{"template":ctx.get(["template"], false)}).w(" ").x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_17,"block":body_18},{});}body_16.__dustBody=!0;function body_17(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.get(["symbol"], false)),{"template":ctx.get(["template"], false)}).w(" ");}body_17.__dustBody=!0;function body_18(chk,ctx){return chk;}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.h("gt",ctx,{"block":body_20},{"key":ctx.getPath(false, ["symbol","fires","length"]),"value":"0","type":"number"},"h");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.w("<p><b class=\"caption\">Emits:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$emits"]).w("</p>");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.h("gt",ctx,{"else":body_22,"block":body_23},{"key":ctx.getPath(false, ["symbol","returns","length"]),"value":"1","type":"number"},"h");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<p><b class=\"caption\">Returns:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.w("<b class=\"caption\">Returns:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","yields"]),ctx,{"block":body_25},{});}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.h("gt",ctx,{"else":body_26,"block":body_27},{"key":ctx.getPath(false, ["symbol","yields","length"]),"value":"1","type":"number"},"h");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.w("<p><b class=\"caption\">Yields:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$yields"]).w("</p>");}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.w("<b class=\"caption\">Yields:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$yields"]).w("</p>");}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.h("gt",ctx,{"else":body_29,"block":body_30},{"key":ctx.getPath(false, ["symbol","exceptions","length"]),"value":"1","type":"number"},"h");}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.w("<p><b class=\"caption\">Throws:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_29.__dustBody=!0;function body_30(chk,ctx){return chk.w("<b class=\"caption\">Throws:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_30.__dustBody=!0;function body_31(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.get(["symbol"], false)),{"template":ctx.get(["template"], false)}).w(" ");}body_31.__dustBody=!0;function body_32(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_33},{});}body_32.__dustBody=!0;function body_33(chk,ctx){return chk.w("<p><b>Example").h("gt",ctx,{"block":body_34},{"key":ctx.getPath(false, ["symbol","examples","length"]),"value":1},"h").w("</b>").f(ctx.getPath(true, []),ctx,"h",["$get_caption","s"]).w("</p><pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt","$tnl","$remove_caption"]).w("</code></pre>");}body_33.__dustBody=!0;function body_34(chk,ctx){return chk.w("&nbsp;#").h("math",ctx,{},{"key":ctx.get(["$idx"], false),"method":"add","operand":"1"},"h");}body_34.__dustBody=!0;function body_35(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_36},{});}body_35.__dustBody=!0;function body_36(chk,ctx){return chk.w("<p class=\"symbol-meta\">").x(ctx.getPath(false, ["symbol","meta","filename"]),ctx,{"block":body_37},{}).x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_38},{}).w("</p>");}body_36.__dustBody=!0;function body_37(chk,ctx){return chk.w("<b>File:</b> ").f(ctx.getPath(false, ["symbol","meta","filename"]),ctx,"h").w("&nbsp;&nbsp;");}body_37.__dustBody=!0;function body_38(chk,ctx){return chk.w("<b>Line:</b> ").f(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,"h").w("&nbsp;&nbsp;");}body_38.__dustBody=!0;function body_39(chk,ctx){return chk.h("ne",ctx,{"block":body_40},{"key":ctx.getPath(false, ["symbol","hideconstructor"]),"type":"boolean","value":"true"},"h");}body_39.__dustBody=!0;function body_40(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(false, ["symbol","$constructor"]),"template":ctx.get(["template"], false)});}body_40.__dustBody=!0;function body_41(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","$members"]),ctx,{"block":body_42},{});}body_41.__dustBody=!0;function body_42(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_42.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var DocmaWeb = (function () {
'use strict';

var Utils={};function getStr(e){return e&&""!==e.trim()?e:null}function cleanName(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2").replace(/^(module\.)?exports\./,"")}function getMetaCodeName(e){return cleanName(Utils.notate(e,"meta.code.name")||"")}function identity(e){return e}Utils.type=function(e){return Object.prototype.toString.call(e).match(/\s(\w+)/i)[1].toLowerCase()},Utils.notate=function(e,t){if("object"==typeof e){var n=Array.isArray(t)?t:t.split("."),t=n[0];if(t)return t=e[t],1<n.length?(n.shift(),Utils.notate(t,n)):t}},Utils.getName=function(e){if(e.alias){var t=getMetaCodeName(e);if(t)return t.replace(/.*?[#.~:](\w+)$/i,"$1")}return e.name},Utils.getLongName=function(e){var t=cleanName(e.longname),n=getMetaCodeName(e)||t,r=cleanName(e.memberof||"");if(e.name===r&&Utils.isConstructor(e))return n;n=e.alias?n:t;if(!r)return n;t=new RegExp("^"+r+"[#.~:]"),e="instance"===e.scope?"#":".";return t.test(n)?n:r+e+n},Utils.getFullName=Utils.getLongName,Utils.getCodeName=function(e){return getMetaCodeName(e)||Utils.getLongName(e)},Utils.getSymbolByName=function(e,t){var n,r,i;if("object"===Utils.type(e)){for(var l=Object.keys(e),o=0;o<l.length;o++)if(r=e[l[o]].documentation,i=Utils.getSymbolByName(r,t))return i;return null}for(r=e,o=0;o<r.length;o++){if((n=r[o]).name===t||n.longname===t||Utils.getFullName(n)===t)return n;if(n.$members&&(i=Utils.getSymbolByName(n.$members,t)))return i}return null},Utils.getLevels=function(e){var e=("string"==typeof e?e:e.$longname)||"";return(e=cleanName(e))?((e||"").split(/[.#~]/)||[]).length:0},Utils.getParentName=function(e){var t;if("string"!=typeof e){if(e.memberof)return cleanName(e.memberof);t=cleanName(e.$longname)}else t=cleanName(e);return t&&/[.#~]/g.test(t)?t.replace(/[.#~][^.#~]*$/,""):""},Utils.getParent=function(e,t){var n="string"==typeof t?Utils.getSymbolByName(e,t):t;if(!n)return null;t=n&&cleanName(n.memberof)||Utils.getParentName(t);return t?Utils.getSymbolByName(e,t):null},Utils.isDeprecated=function(e){return e.deprecated},Utils.isGlobal=function(e){return"global"===e.scope},Utils.isNamespace=function(e){return"namespace"===e.kind},Utils.isModule=function(e){return"module"===e.kind},Utils.isMixin=function(e){return"mixin"===e.kind},Utils.isClass=function(e){return"class"===e.kind&&"MethodDefinition"!==Utils.notate(e,"meta.code.type")},Utils.isConstant=function(e){return"constant"===e.kind},Utils.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===Utils.notate(e,"meta.code.type")},Utils.isStaticMember=function(e){return"static"===e.scope},Utils.isStatic=Utils.isStaticMember,Utils.isInner=function(e){return"inner"===e.scope},Utils.isInstanceMember=function(e){return"instance"===e.scope},Utils.isInterface=function(e){return"interface"===e.scope},Utils.isMethod=function(e){var t=Utils.notate(e,"meta.code.type");return"function"===e.kind||"FunctionExpression"===t||"FunctionDeclaration"===t},Utils.isFunction=Utils.isMethod,Utils.isInstanceMethod=function(e){return Utils.isInstanceMember(e)&&Utils.isMethod(e)},Utils.isStaticMethod=function(e){return Utils.isStaticMember(e)&&Utils.isMethod(e)},Utils.isProperty=function(e){return"member"===e.kind&&!Utils.isMethod(e)},Utils.isInstanceProperty=function(e){return Utils.isInstanceMember(e)&&Utils.isProperty(e)},Utils.isStaticProperty=function(e){return Utils.isStaticMember(e)&&Utils.isProperty(e)},Utils.isTypeDef=function(e){return"typedef"===e.kind},Utils.isCustomType=Utils.isTypeDef,Utils.isCallback=function(e){var t=(e.type||{}).names||[];return"typedef"===e.kind&&0<=(e.comment||"").indexOf("@callback "+e.longname)&&1===t.length&&"function"===t[0]},Utils.isEnum=function(e){return Boolean(e.isEnum)},Utils.isEvent=function(e){return"event"===e.kind},Utils.isExternal=function(e){return"external"===e.kind},Utils.isGenerator=function(e){return e.generator&&"function"===e.kind},Utils.isReadOnly=function(e){return e.readonly},Utils.isPublic=function(e){return"string"!=typeof e.access||"public"===e.access},Utils.isPrivate=function(e){return"private"===e.access},Utils.isPackagePrivate=function(e){return"package"===e.access},Utils.isProtected=function(e){return"protected"===e.access},Utils.isUndocumented=function(e){return!e.comments},Utils.hasDescription=function(e){return Boolean(getStr(e.classdesc)||getStr(e.description))},Utils.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},Utils.trimNewLines=function(e){return e.replace(/^[\r\n]+|[\r\n]+$/,"")},Utils.parseTicks=function(e){return e.replace(/(```\s*)([\s\S]*?)(\s*```)/g,function(e,t,n){return Utils.normalizeTabs(Utils._wrapCode(n,!0,!0).replace(/`/g,"&#x60;"))}).replace(/(`)(.*?)(`)/g,function(e,t,n){return Utils._wrapCode(n,!0)})},Utils.parseNewLines=function(e,n){return n=n||{},Utils._tokenize(e,function(e,t){if(t)return e;t=e.split(/[\r\n]{2,}/);return t.length<=1&&n.keepIfSingle?e:t.map(function(e){return"<p>"+e+"</p>"}).join("")}).join("")},Utils.parseLinks=function(e,i){i=i||{};e=e.replace(/\{@link +([^}]*?)\}/g,function(e,t){var n,r,t=t.split("|");return 1===t.length?n=r=t[0].trim():(n=t[0].trim(),r=t[1].trim()),'<a href="'+n+'"'+(i.target?' target="'+i.target+'"':"")+">"+r+"</a>"});return Utils.parseTicks(e)},Utils.parse=function(e,t){return t=t||{},e=Utils.trimLeft(e),e=Utils.parseNewLines(e,t),e=Utils.parseTicks(e),Utils.parseLinks(e,t)},Utils.normalizeTabs=function(e){var r,t=e.match(/^\s*/gm),n=1/0;return t.forEach(function(e,t){e=e.replace(/\t/g,"  "),0<t&&(n=Math.min(e.length,n))}),n!==1/0&&(t=new RegExp("^\\s{"+n+"}","g"),e=e.replace(t,"")),(e=e.replace(/^\s*/,"")).replace(/([\r\n]+)(\s+)/gm,function(e,t,n){return r=n.replace(/\t/g,"  "),t+new Array(r.length-r.length%2+1).join(" ")})},Utils.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var t=Utils.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.$kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return Utils.isConstructor(e)&&(t+=" constructor"),Utils.isMethod(e)&&(t+=" method"),Utils.isProperty(e)&&(t+=" property"),t.replace(/[><"'`\n\r]/g,"").toLowerCase()},Utils.getCodeFileInfo=function(e){return{filename:Utils.notate(e,"meta.filename"),lineno:Utils.notate(e,"meta.lineno"),path:Utils.notate(e,"meta.path")}},Utils.getSymbolLink=function(e,t){if("string"!=typeof t)return t.$docmaLink;t=Utils.getSymbolByName(e,t);return t?t.$docmaLink:""};var reEndBrackets=/\[\]$/,reTypeParts=/^([^<]+?)(?:\.)?(?:<([^>]+)>)?(\[\])?$/;function _link(e,t,n){var r,i=reEndBrackets.test(t)?"[]":"",l=t.replace(reEndBrackets,""),o=n||{},n="";return"internal"!==o.linkType&&(r=Utils._getTypeExternalLink(l))&&(n=' target="_blank"'),t=(r=!r&&"external"!==o.linkType?Utils.getSymbolLink(e,l):r)?'<a href="'+r+'"'+n+">"+(o.displayText||l)+i+"</a>":t}function decodeHash(e){return decodeURIComponent(e).replace(/^#/,"")}Utils._parseAnchorLinks=function(t,e,n){var r=e.match(reTypeParts);if(!r||!r[1])return"";var i=r[3]||"",e="";return r[2]&&(e=(e=(e=r[2].split("|")).map(function(e){return _link(t,e,n)}).join('<span class="code-delim">|</span>'))&&"&lt;"+e+"&gt;"),_link(t,r[1],n)+e+i},Utils.getTypes=function(t,e,n){var r=n||{},n=(n="class"===e.kind?["class"]:Utils.notate(e,"type.names")||[]).map(function(e){return e=r.links?Utils._parseAnchorLinks(t,e,{linkType:r.links}):e}).join('<span class="code-delim">|</span>');return e.isEnum?"enum&lt;"+n+"&gt;":n},Utils.getReturnTypes=function(n,e,t){e=e.returns;if(!Array.isArray(e))return"void";var r=t||{},e=e.reduce(function(e,t){t=Utils.notate(t,"type.names")||[];return r.links&&(t=t.map(function(e){return Utils._parseAnchorLinks(n,e,{linkType:r.links})})),e.concat(t)},[]);return 0<e.length?e.join('<span class="code-delim">|</span>'):"void"},Utils.getCodeTags=function(n,e,t){var r=t||{};return e.map(function(e){if(r.links){var t=Utils._parseAnchorLinks(n,e,{linkType:r.links});return Utils._wrapCode(t,!1)}return Utils._wrapCode(e,!0)}).join(r.demileter||",")},Utils.getFormattedTypeList=function(n,e,t){if(!e||0===e.length)return"";var r=t||{},i='<span class="code-delim">'+(r.delimeter||"|")+"</span>",l="boolean"!=typeof r.descriptions||r.descriptions,o=r.descDelimeter||"&nbsp;&nbsp;—&nbsp;&nbsp;",a="",e=e.map(function(e){return l&&(a=(a=Utils.parse(e.description||"",{keepIfSingle:!0}))&&o+a),e.type.names.map(function(e){if(r.links){var t=Utils._parseAnchorLinks(n,e,{linkType:r.links});return Utils._wrapCode(t,!1)}return Utils._wrapCode(e,!0)}).join(i)+a});return 1<e.length?"<ul><li>"+e.join("</li><li>")+"</li></ul>":e},Utils.getEmittedEvents=function(t,e,n){if(!e||0===e.length)return"";var r,i=n||{},n=i.delimeter||", ";return(e||[]).map(function(e){if(r=e.split(/\s*[\s-—]\s*/g),r=(r[0]||"").trim(),i.links){e=Utils._parseAnchorLinks(t,r,{linkType:i.links});return Utils._wrapCode(e,!1)}return Utils._wrapCode(r,!0)}).join(n)},Utils._find=function(e,t){if(!e||!t)return null;for(var n,r=null,i=0;i<e.length;i++)if((n=e[i])&&"object"==typeof n){for(var l in t)if(void 0!==t[l]&&t.hasOwnProperty(l)){if(t[l]!==n[l]){r=null;break}r=n}if(r)break}return r},Utils._assign=function(e,t,n){for(var r in e=e||{},t)t.hasOwnProperty(r)&&(n?Object.defineProperty(e,r,{enumerable:!0,value:t[r]}):e[r]=t[r]);return e},Utils._values=function(e){if(Array.isArray(e))return e;var t,n=[];for(t in e)e.hasOwnProperty(t)&&n.push(e[t]);return n},Utils._wrapCode=function(e,t,n){return e="<code>"+(e=void 0===t||!0===t?e.replace(/</g,"&lt;").replace(/>/g,"&gt;"):e)+"</code>",n?"<pre>"+e+"</pre>":e},Utils._tokenize=function(e,t){"function"!=typeof t&&(t=identity);if(e.indexOf("```")<0)return[t(e,!1)];for(var n="```".length,r="",i="",l=[],o=!1,a=0;a<e.length;a++)r+=e[a],i+=e[a],"```"===(r=r.length>n?r.slice(-n):r)&&(i=(o=!o)?(l.push(t(i.slice(0,-n),!1)),r):(l.push(t(i,!0)),""));return l},Utils._ensureSlash=function(e,t,n){return t?(e&&"/"!==t.slice(0,1)&&(t="/"+t),n&&"/"!==t.slice(-1)&&(t+="/"),t):e||n?"/":""},Utils.DOM={};var ATTR_BODY_STYLE="data-body-style";Utils.DOM.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){e=t.getBoundingClientRect();if(e.width||e.height||t.getClientRects().length){t=document.documentElement;return{top:e.top+window.pageYOffset-t.clientTop,left:e.left+window.pageXOffset-t.clientLeft}}}},Utils.DOM.scrollTo=function(e){var t=document.documentElement||document.body;(e=decodeHash(e||window.location.hash||""))?(e=document.getElementById(e))&&(t.scrollTop=Utils.DOM.getOffset(e).top):t.scrollTop=0},Utils.DOM._createChild=function(e,t,n){n=n||{};var r=document.createElement(t||"div");return Object.keys(n).forEach(function(e){r[e]=n[e]}),e.appendChild(r),r},Utils.DOM._removePrevBodyStyles=function(){for(var e=document.getElementsByTagName("head")[0].querySelectorAll("["+ATTR_BODY_STYLE+"]");0<e.length;)e[0].parentNode.removeChild(e[0])},Utils.DOM._moveBodyStylesToHead=function(){for(var e,t=document.getElementsByTagName("head")[0],n=document.body.getElementsByTagName("style"),r=0;r<n.length;r++)(e=n[r]).parentNode.removeChild(e),e.setAttribute(ATTR_BODY_STYLE,""),t.appendChild(e)};var _builtinURLs={globals:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/",statements:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/",operators:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/",functions:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/",web:"https://developer.mozilla.org/en-US/docs/Web/API/"},_builtins={globals:["Infinity","NaN","undefined","null","Object","Function","function","Boolean","boolean","Symbol","Error","EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError","Number","number","Math","Date","String","string","RegExp","Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","Map","Set","WeakMap","WeakSet","ArrayBuffer","DataView","JSON","Promise","Generator","GeneratorFunction","Reflect","Proxy","TypedArray","Intl","Intl.Collator","Intl.DateTimeFormat","Intl.NumberFormat","WebAssembly","WebAssembly.Module","WebAssembly.Instance","WebAssembly.Memory","WebAssembly.Table","WebAssembly.CompileError","WebAssembly.LinkError","WebAssembly.RuntimeError"],statements:["function","function*","async function","class","debugger"],operators:["void","super","this"],functions:["arguments"],web:["AbstractWorker","AnalyserNode","AudioBuffer","AudioContext","AudioListener","AudioNode","BaseAudioContext","BeforeUnloadEvent","Blob","BlobEvent","BufferSource","ByteString","CSSMediaRule","CSSPageRule","CSSPrimitiveValue","CSSRule","CSSRuleList","CSSStyleDeclaration","CSSStyleRule","CSSStyleSheet","CSSSupportsRule","CSSValue","CSSValueList","CloseEvent","CompositionEvent","Console","Coordinates","Crypto","CryptoKey","CustomEvent","DOMException","DOMImplementation","Document","DocumentFragment","DocumentType","DoubleRange","DragEvent","Element","ErrorEvent","Event","EventListener","EventSource","EventTarget","File","FileList","FileReader","FileReaderSync","FormData","Geolocation","HTMLAnchorElement","HTMLAreaElement","HTMLAudioElement","HTMLBRElement","HTMLBaseElement","HTMLBodyElement","HTMLButtonElement","HTMLCanvasElement","HTMLCollection","HTMLDListElement","HTMLDataElement","HTMLDataListElement","HTMLDetailsElement","HTMLDivElement","HTMLDocument","HTMLElement","HTMLEmbedElement","HTMLFieldSetElement","HTMLFormControlsCollection","HTMLFormElement","HTMLHRElement","HTMLHeadElement","HTMLHeadingElement","HTMLHtmlElement","HTMLIFrameElement","HTMLImageElement","HTMLInputElement","HTMLKeygenElement","HTMLLIElement","HTMLLabelElement","HTMLLegendElement","HTMLLinkElement","HTMLMapElement","HTMLMediaElement","HTMLMetaElement","HTMLMeterElement","HTMLModElement","HTMLOListElement","HTMLObjectElement","HTMLOptGroupElement","HTMLOptionElement","HTMLOptionsCollection","HTMLOutputElement","HTMLParagraphElement","HTMLParamElement","HTMLPreElement","HTMLProgressElement","HTMLQuoteElement","HTMLScriptElement","HTMLSelectElement","HTMLSlotElement","HTMLSourceElement","HTMLSpanElement","HTMLStyleElement","HTMLTableCaptionElement","HTMLTableCellElement","HTMLTableColElement","HTMLTableDataCellElement","HTMLTableElement","HTMLTableHeaderCellElement","HTMLTableRowElement","HTMLTableSectionElement","HTMLTemplateElement","HTMLTextAreaElement","HTMLTimeElement","HTMLTitleElement","HTMLTrackElement","HTMLUListElement","HTMLUnknownElement","HTMLVideoElement","HashChangeEvent","History","ImageData","InputEvent","KeyboardEvent","LinkStyle","Location","LongRange","MediaDevices","MediaDeviceInfo","MediaError","MediaRecorder","MediaStream","MessageChannel","MessageEvent","MessagePort","MouseEvent","MutationObserver","MutationRecord","NamedNodeMap","Navigator","NavigatorGeolocation","Node","NodeIterator","NodeList","NonDocumentTypeChildNode","Notification","PageTransitionEvent","PointerEvent","PopStateEvent","Position","PositionError","PositionOptions","ProgressEvent","PromiseRejectionEvent","RTCCertificate","RTCConfiguration","RTCDTMFSender","RTCDTMFToneChangeEvent","RTCDataChannel","RTCPeerConnection","RTCPeerConnection","RTCRtpCodecParameters","RTCRtpContributingSource","RTCRtpReceiver","RTCRtpSender","RTCRtpSynchronizationSource","RTCRtpTransceiver","RTCRtpTransceiverDirection","RTCRtpTransceiverInit","RTCStatsReport","RadioNodeList","RandomSource","Range","RenderingContext","SVGAnimateElement","SVGAnimateMotionElement","SVGAnimateTransformElement","SVGAnimationElement","SVGCircleElement","SVGClipPathElement","SVGCursorElement","SVGElement","SVGEllipseElement","SVGEvent","SVGFilterElement","SVGGeometryElement","SVGGradientElement","SVGGraphicsElement","SVGImageElement","SVGLineElement","SVGLinearGradientElement","SVGMPathElement","SVGMaskElement","SVGMetadataElement","SVGPathElement","SVGPatternElement","SVGPolygonElement","SVGPolylineElement","SVGRadialGradientElement","SVGRect","SVGRectElement","SVGSVGElement","SVGScriptElement","SVGSetElement","SVGStopElement","SVGStyleElement","SVGSwitchElement","SVGSymbolElement","SVGTSpanElement","SVGTextContentElement","SVGTextElement","SVGTextPathElement","SVGTextPositioningElement","SVGTitleElement","SVGTransform","SVGTransformList","SVGTransformable","SVGUseElement","SVGViewElement","ShadowRoot","SharedWorker","Storage","StorageEvent","StyleSheet","StyleSheetList","Text","TextMetrics","TimeEvent","TimeRanges","Touch","TouchEvent","TouchList","Transferable","TreeWalker","UIEvent","URL","WebGLActiveInfo","WebGLBuffer","WebGLContextEvent","WebGLFramebuffer","WebGLProgram","WebGLRenderbuffer","WebGLRenderingContext","WebGLShader","WebGLTexture","WebGLUniformLocation","WebGLVertexArrayObject","WebSocket","WheelEvent","Window","Worker","WorkerGlobalScope","WorkerLocation","WorkerNavigator","XMLHttpRequest","XMLHttpRequestEventTarget","XMLSerializer","XPathExpression","XPathResult","XSLTProcessor"]},_cats=Object.keys(_builtins);Utils._getTypeExternalLink=function(e){for(var t,n=0;n<_cats.length;n++)if(t=_cats[n],0<=_builtins[t].indexOf(e))return _builtinURLs[t]+e.replace(/^([^.]*\.)/,"");return""};

function DocmaWeb(t){this._=t||{},this._.initialLoad=!1,this._.appEntranceRI=null,this._.emitter=new EventEmitter,Object.defineProperty(this,"app",{configurable:!1,get:function(){return this._.app||null}}),Object.defineProperty(this,"apis",{configurable:!1,get:function(){return this._.apis||{}}}),Object.defineProperty(this,"routes",{configurable:!1,get:function(){return this._.routes||{}}}),Object.defineProperty(this,"template",{configurable:!1,get:function(){return this._.template||{}}}),Object.defineProperty(this,"location",{configurable:!1,get:function(){var t=Utils._ensureSlash(!0,window.location.pathname,!0),e=Utils._ensureSlash(!0,docma.app.base,!0),o=t;return t.slice(0,e.length)===e&&(o=t.slice(e.length-1,t.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:Utils._ensureSlash(!0,docma.app.entrance,!1),base:e,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:t,pathname:o,path:o+(window.location.search||""),getQuery:function(t,e){"?"===(e=void 0===e?window.location.search||"":e).slice(0,1)&&(e=e.slice(1)),t=t.replace(/[[\]]/g,"\\$&");e=new RegExp("&?"+t+"(=([^&#]*)|&|#|$)").exec(e);return e&&e[2]?decodeURIComponent(e[2].replace(/\+/g," ")):""}}}}),Object.defineProperty(this,"currentRoute",{configurable:!1,get:function(){return this._.currentRoute||null}}),Object.defineProperty(this,"documentation",{configurable:!1,get:function(){return this._.documentation||[]}}),Object.defineProperty(this,"symbols",{configurable:!1,get:function(){return this._.symbols||[]}})}DocmaWeb.prototype._trigger=function(t,e){this.info("Event:",t,e?e[0]:""),this._.emitter.trigger(t,e)},DocmaWeb.Event={Ready:"ready",Render:"render",Route:"route",Navigate:"navigate"},DocmaWeb.prototype.on=function(t,e){return this._.emitter.on.apply(this._.emitter,arguments),docma},DocmaWeb.prototype.once=function(){return this._.emitter.once.apply(this._.emitter,arguments),this},DocmaWeb.prototype.off=function(){return this._.emitter.off.apply(this._.emitter,arguments),this},DocmaWeb.prototype.addListener=DocmaWeb.prototype.on,DocmaWeb.prototype.addListenerOnce=DocmaWeb.prototype.once,DocmaWeb.prototype.removeListener=DocmaWeb.prototype.off,DocmaWeb.prototype.log=function(){docma._.logsEnabled&&console.log.apply(console,arguments)},DocmaWeb.prototype.info=function(){docma._.logsEnabled&&console.info.apply(console,arguments)},DocmaWeb.prototype.warn=function(){docma._.logsEnabled&&console.warn.apply(console,arguments)},DocmaWeb.prototype.error=function(){docma._.logsEnabled&&console.error.apply(console,arguments)},DocmaWeb.prototype.getDocmaElem=function(){return document.getElementById(this._.elementID)||Utils.DOM.createChild(document.body,"div",{id:this._.elementID})},DocmaWeb.prototype.getContentElem=function(){var t=document.getElementById(this._.contentElementID);if(!t)throw new Error("Partial "+this._.partials.content+' should have an element with id="'+this._.contentElementID+'".');return t},DocmaWeb.prototype.loadContent=function(t){this.getContentElem().innerHTML=t,Utils.DOM._removePrevBodyStyles(),Utils.DOM._moveBodyStylesToHead(),Utils.DOM.scrollTo()},DocmaWeb.prototype._loadCompiledContent=function(t){this.getDocmaElem().innerHTML=t},DocmaWeb.prototype._fixAnchors=function(r){this.app.base&&setTimeout(function(){for(var t=document.querySelectorAll('a[href^="#"]'),e=0;e<t.length;e++){var o,n=(o=t[e]).getAttribute("href");"#"===n.slice(0,1)&&1<n.length&&(n=window.location.pathname+(window.location.search||"")+n,o.setAttribute("href",n))}"function"==typeof r&&r()},50)},DocmaWeb.prototype.addFilter=function(t,e){if(this.filterExists(t))throw new Error('Filter "'+t+'" already exists.');return dust.filters[t]=e,this},DocmaWeb.prototype.removeFilter=function(t){return delete dust.filters[t],this},DocmaWeb.prototype.filterExists=function(t){return"function"==typeof dust.filters[t]},DocmaWeb.prototype.createRoute=function(t,e){return new DocmaWeb.Route(this,t,e)},DocmaWeb.prototype.createRouteFromID=function(t){if("string"!=typeof t)return this.warn("Route ID is not a string: "+t),new DocmaWeb.Route(this,null);t=t.split(":");return new DocmaWeb.Route(this,t[1],t[0])},DocmaWeb.prototype.createRouteFromQuery=function(t){if(!t)return new DocmaWeb.Route(null);var e=t.split("&")[0].split("="),t=e[0].toLowerCase(),e=e[1];return new DocmaWeb.Route(this,e,t)},DocmaWeb.prototype._render=function(t,o){var n=this;dust.render(t,this,function(t,e){if(t)throw t;n._loadCompiledContent(e),"function"==typeof o&&o()})},DocmaWeb.prototype._triggerAfterRender=function(){this._trigger(DocmaWeb.Event.Render,[docma.currentRoute]),this._.initialLoad&&(this._trigger(DocmaWeb.Event.Ready),this._.initialLoad=!1)},DocmaWeb.prototype._render404=function(t,e){this._.currentRoute=this.createRoute(null);var o=this;this._render(this._.partials.notFound,function(){if(o._trigger(DocmaWeb.Event.Render,[null]),Utils.DOM.scrollTo(),"function"==typeof e)return e(404);throw new Error("Page or content not found for route: "+JSON.stringify(t))})},DocmaWeb.prototype.fetch=function(e,o){var n=new XMLHttpRequest,r=this;n.onreadystatechange=function(){if(4===n.readyState){var t=200===n.status?n.responseText:"";return r.log("XHR GET:",n.status,e),o(n.status,t)}},n.open("GET",e,!0),n.send()},DocmaWeb.prototype.render=function(o,n){if(!o||!o.exists())return this._render404(o,n);var r,i;o.isEqualTo(this.currentRoute)||(this._.currentRoute=o,r="function"==typeof n,i=this,o.type===DocmaWeb.Route.Type.API?this._render(this._.partials.api,function(){i._triggerAfterRender(),r&&n(200),i._fixAnchors(function(){Utils.DOM.scrollTo()})}):docma.fetch(o.contentPath,function(t,e){return 404===t?i._render404(o,n):void i._render(i._.partials.content,function(){i.loadContent(e),i._triggerAfterRender(),r&&n(t),i._fixAnchors()})}))},DocmaWeb.Utils=Utils;

var _arrRouteTypes;DocmaWeb.Route=function(t,e,o){if(this._docma=t,o&&!(_arrRouteTypes.indexOf(o)<0)){if(e)t.app.routing.caseSensitive||(e=e.toLowerCase());else{if(o!==DocmaWeb.Route.Type.API)return;e=t._.defaultApiName}e=Utils._find(t.routes,{type:o,name:e});e&&Utils._assign(this,e)}},DocmaWeb.Route.Type={API:"api",CONTENT:"content"},_arrRouteTypes=Utils._values(DocmaWeb.Route.Type),DocmaWeb.Route.SourceType={JS:"js",MD:"md",HTML:"html"},DocmaWeb.Route.prototype.exists=function(){return Boolean(this.id)},DocmaWeb.Route.prototype.isEqualTo=function(t){return!!(t&&t.exists()&&this.exists())&&t.path===this.path},DocmaWeb.Route.prototype.isCurrent=function(){return this.isEqualTo(this._docma.currentRoute)},DocmaWeb.Route.prototype.apply=function(){return this.type===DocmaWeb.Route.Type.API?(this._docma._.documentation=this._docma.apis[this.name].documentation,this._docma._.symbols=this._docma.apis[this.name].symbols):(this._docma._.documentation=null,this._docma._.symbols=null),this._docma._trigger(DocmaWeb.Event.Route,[this.exists()?this:null]),this._docma.render(this),this},DocmaWeb.Route.prototype.toString=function(){return JSON.stringify(this)};

dust.filters=dust.filters||{},dust.filters.$pt=function(t){return DocmaWeb.Utils.parseTicks(t)},dust.filters.$pnl=function(t){return DocmaWeb.Utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return DocmaWeb.Utils.parseLinks(t)},dust.filters.$tl=function(t){return DocmaWeb.Utils.trimLeft(t)},dust.filters.$tnl=function(t){return DocmaWeb.Utils.trimNewLines(t)},dust.filters.$p=function(t){return DocmaWeb.Utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return DocmaWeb.Utils.normalizeTabs(t)},dust.filters.$desc=function(t){return DocmaWeb.Utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""};var reJSValues=/true|false|null|undefined|Infinity|NaN|\d+|Number\.\w+|Math\.(PI|E|LN(2|10)|LOG(2|10)E|SQRT(1_)?2)|\[.*?]|\{.*?}|new [a-zA-Z]+.*|\/.+\/[gmiu]*|Date\.(now\(\)|UTC\(.*)|window|document/;dust.filters.$val=function(t){var e=DocmaWeb.Utils.notate(t,"meta.code.value");if(void 0===e)return"";if("string"!=typeof e)return e;t=DocmaWeb.Utils.notate(t,"type.names")||[];return!/['"`]/.test(e.slice(0,1))&&0<=t.indexOf("String")&&(1===t.length||-1===reJSValues.indexOf(e))?'"'+e+'"':e},dust.filters.$id=function(t){return("string"==typeof t?t:(DocmaWeb.Utils.isConstructor(t)?"new-":"")+t.$longname).replace(/ /g,"-")};

DocmaWeb.version = "2.1.0";
return DocmaWeb;
})();
var docma = Object.freeze(new DocmaWeb({"version":"2.1.0","routes":[{"id":"api:","type":"api","name":"_def_","path":"/api","contentPath":null,"sourceType":"js"},{"id":"content:changelog","type":"content","name":"changelog","path":"/changelog","contentPath":"content/changelog.html","sourceType":"md"},{"id":"content:code_of_conduct","type":"content","name":"code_of_conduct","path":"/code_of_conduct","contentPath":"content/code_of_conduct.html","sourceType":"md"},{"id":"content:contributing","type":"content","name":"contributing","path":"/contributing","contentPath":"content/contributing.html","sourceType":"md"},{"id":"content:license","type":"content","name":"license","path":"/license","contentPath":"content/license.html","sourceType":"md"},{"id":"content:pull_request_template","type":"content","name":"pull_request_template","path":"/pull_request_template","contentPath":"content/pull_request_template.html","sourceType":"md"},{"id":"content:readme","type":"content","name":"readme","path":"/readme","contentPath":"content/readme.html","sourceType":"md"}],"apis":{"_def_":{"documentation":[{"comment":"/**\r\n * The package Hastebin Client\r\n */","meta":{"range":[369,3718],"filename":"Hastebin.js","lineno":15,"columnno":0,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Clients","code":{"id":"astnode100000016","name":"Hastebin","type":"ClassDeclaration","paramnames":[]}},"classdesc":"The package Hastebin Client","name":"Hastebin","longname":"Hastebin","kind":"class","scope":"global","$longname":"Hastebin","$kind":"class","$docmaLink":"/api/#Hastebin","$members":[{"comment":"/**\r\n   * Get data from Hastebin\r\n   * @param {String} url The URL to get the data from\r\n   * @returns {Promise<Object>} Hastebin Object\r\n   */","meta":{"range":[2013,3715],"filename":"Hastebin.js","lineno":68,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Clients","code":{"id":"astnode100000183","name":"Hastebin.get","type":"MethodDefinition","paramnames":["url"]},"vars":{"":null}},"description":"Get data from Hastebin","params":[{"type":{"names":["String"]},"description":"The URL to get the data from","name":"url"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"Hastebin Object"}],"name":"get","longname":"Hastebin.get","kind":"function","memberof":"Hastebin","scope":"static","$longname":"Hastebin.get","$kind":"method","$docmaLink":"/api/#Hastebin.get"},{"comment":"/**\r\n   * Post data on Hastebin\r\n   * @param {Any} data The data to post\r\n   * @param {String} [extension] The file extension to save with\r\n   * @returns {Promise<Object>} Hastebin Object\r\n   */","meta":{"range":[587,1860],"filename":"Hastebin.js","lineno":22,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Clients","code":{"id":"astnode100000019","name":"Hastebin.post","type":"MethodDefinition","paramnames":["data","extension"]},"vars":{"":null}},"description":"Post data on Hastebin","params":[{"type":{"names":["Any"]},"description":"The data to post","name":"data"},{"type":{"names":["String"]},"optional":true,"description":"The file extension to save with","name":"extension"}],"returns":[{"type":{"names":["Promise.<Object>"]},"description":"Hastebin Object"}],"name":"post","longname":"Hastebin.post","kind":"function","memberof":"Hastebin","scope":"static","$longname":"Hastebin.post","$kind":"method","$docmaLink":"/api/#Hastebin.post"}]},{"comment":"/**\r\n * The Tools-Kit package class\r\n */","meta":{"range":[509,917],"filename":"index.js","lineno":16,"columnno":0,"path":"C:\\Users\\danie\\Git\\tools-kit","code":{"id":"astnode100007099","name":"Kit","type":"ClassDeclaration","paramnames":[]}},"classdesc":"The Tools-Kit package class","name":"Kit","longname":"Kit","kind":"class","scope":"global","$longname":"Kit","$kind":"class","$docmaLink":"/api/#Kit"},{"comment":"/**\r\n * The package Logger Manager\r\n */","meta":{"range":[824,42765],"filename":"Logger.js","lineno":25,"columnno":0,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100000531","name":"Logger","type":"ClassDeclaration","paramnames":[]}},"classdesc":"The package Logger Manager","name":"Logger","longname":"Logger","kind":"class","scope":"global","$longname":"Logger","$kind":"class","$docmaLink":"/api/#Logger","$members":[{"comment":"/**\r\n   * Logging a stylish Debug message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.debug(options, ...content) or logger.debug(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.debug()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.debug(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.debug('Or just stock options');\r\n   */","meta":{"range":[23309,25052],"filename":"Logger.js","lineno":352,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100002789","name":"Logger.debug","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish Debug message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.debug(options, ...content) or logger.debug(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.debug()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.debug(options, 'Some text', 'More text', 'And even more text!!!');\r logger.debug('Or just stock options');"],"name":"debug","longname":"Logger.debug","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.debug","$kind":"method","$docmaLink":"/api/#Logger.debug"},{"comment":"/**\r\n   * Logging a stylish Error message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.error(options, ...content) or logger.error(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.error()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.error(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.error('Or just stock options');\r\n   */","meta":{"range":[19794,21537],"filename":"Logger.js","lineno":305,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100002448","name":"Logger.error","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish Error message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.error(options, ...content) or logger.error(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.error()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.error(options, 'Some text', 'More text', 'And even more text!!!');\r logger.error('Or just stock options');"],"name":"error","longname":"Logger.error","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.error","$kind":"method","$docmaLink":"/api/#Logger.error"},{"comment":"/**\r\n   * A list of all the logger events\r\n   * @returns {Array} All the logger events\r\n   * @readonly\r\n   */","meta":{"range":[42532,42584],"filename":"Logger.js","lineno":625,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100004850","name":"Logger.events","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all the logger events","returns":[{"type":{"names":["Array"]},"description":"All the logger events"}],"readonly":true,"name":"events","longname":"Logger.events","kind":"member","memberof":"Logger","scope":"static","params":[],"$longname":"Logger.events","$kind":"property","$docmaLink":"/api/#Logger.events"},{"comment":"/**\r\n   * Logging a stylish Fatal Error message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.fatal(options, ...content) or logger.fatal(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.fatal()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.fatal(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.fatal('Or just stock options');\r\n   */","meta":{"range":[12763,14506],"filename":"Logger.js","lineno":211,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100001766","name":"Logger.fatal","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish Fatal Error message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.fatal(options, ...content) or logger.fatal(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.fatal()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.fatal(options, 'Some text', 'More text', 'And even more text!!!');\r logger.fatal('Or just stock options');"],"name":"fatal","longname":"Logger.fatal","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.fatal","$kind":"method","$docmaLink":"/api/#Logger.fatal"},{"comment":"/**\r\n   * Logging a stylish text to the console using the Figlet package\r\n   * @param {Object} [options] The options object to use with this method and the Figlet package\r\n   * @see See {@link https://www.npmjs.com/package/figlet|https://www.npmjs.com/package/figlet} For more Figlet options\r\n   * @param {Object} [options.figlet] The Figlet package options\r\n   * @param {String} [options.figlet.font] A string value that indicates the FIGlet font to use.\r\n   * @param {String} [options.figlet.verticalLayout] A string value that indicates the vertical layout to use.\r\n   * @param {String} [options.figlet.horizontalLayout] A string value that indicates the horizontal layout to use.\r\n   * @see See {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more Loging options\r\n   * @param {Object} [options.log] The method options\r\n   * @param {String} [options.log.background] A string value that indicates the background color name.\r\n   * @param {String} [options.log.color] A string value that indicates the color name.\r\n   * @param {String} [options.log.style] A string value that indicates the style name.\r\n   * @param {String} [options.log.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.log.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.log.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.log.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.figlet(options, ...content) or logger.figlet(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.figlet()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    // For more Figlet options see https://www.npmjs.com/package/figlet\r\n   *    figlet: {\r\n   *      font: 'Ghost',\r\n   *      verticalLayout: 'default',\r\n   *      horizontalLayout: 'default'\r\n   *    },\r\n   *    // For more Log options see https://www.npmjs.com/package/tools-kit\r\n   *    log: {\r\n   *      background: 'black',\r\n   *      color: 'magenta',\r\n   *      style: 'bold',\r\n   *      type: 'log',\r\n   *      time: true,\r\n   *      tag: 'FIGLET IS COOL'\r\n   *    }\r\n   *  };\r\n   *\r\n   *  logger.figlet(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.figlet('Or just stock options');\r\n   */","meta":{"range":[34824,37960],"filename":"Logger.js","lineno":508,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100003812","name":"Logger.figlet","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish text to the console using the Figlet package","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method and the Figlet package","name":"options"},{"type":{"names":["Object"]},"optional":true,"description":"The Figlet package options","name":"options.figlet"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the FIGlet font to use.","name":"options.figlet.font"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the vertical layout to use.","name":"options.figlet.verticalLayout"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the horizontal layout to use.","name":"options.figlet.horizontalLayout"},{"type":{"names":["Object"]},"optional":true,"description":"The method options","name":"options.log"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.log.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.log.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.log.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.log.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.log.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.log.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.log.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.figlet(options, ...content) or logger.figlet(...content)","name":"args"}],"see":["See {@link https://www.npmjs.com/package/figlet|https://www.npmjs.com/package/figlet} For more Figlet options","See {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more Loging options"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.figlet()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   // For more Figlet options see https://www.npmjs.com/package/figlet\r   figlet: {\r     font: 'Ghost',\r     verticalLayout: 'default',\r     horizontalLayout: 'default'\r   },\r   // For more Log options see https://www.npmjs.com/package/tools-kit\r   log: {\r     background: 'black',\r     color: 'magenta',\r     style: 'bold',\r     type: 'log',\r     time: true,\r     tag: 'FIGLET IS COOL'\r   }\r };\r\r logger.figlet(options, 'Some text', 'More text', 'And even more text!!!');\r logger.figlet('Or just stock options');"],"name":"figlet","longname":"Logger.figlet","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.figlet","$kind":"method","$docmaLink":"/api/#Logger.figlet"},{"comment":"/**\r\n   * Logging a stylish important message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.important(options, ...content) or logger.important(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.important()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.important(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.important('Or just stock options');\r\n   */","meta":{"range":[5697,7451],"filename":"Logger.js","lineno":117,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100001084","name":"Logger.important","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish important message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.important(options, ...content) or logger.important(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.important()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.important(options, 'Some text', 'More text', 'And even more text!!!');\r logger.important('Or just stock options');"],"name":"important","longname":"Logger.important","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.important","$kind":"method","$docmaLink":"/api/#Logger.important"},{"comment":"/**\r\n   * Logging a stylish Information message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.info(options, ...content) or logger.info(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.info()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.info(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.info('Or just stock options');\r\n   */","meta":{"range":[26825,28565],"filename":"Logger.js","lineno":399,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100003130","name":"Logger.info","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish Information message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.info(options, ...content) or logger.info(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.info()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.info(options, 'Some text', 'More text', 'And even more text!!!');\r logger.info('Or just stock options');"],"name":"info","longname":"Logger.info","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.info","$kind":"method","$docmaLink":"/api/#Logger.info"},{"comment":"/**\r\n   * Logging a stylish Log message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.log(options, ...content) or logger.log(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.log()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.log(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.log('Or just stock options');\r\n   */","meta":{"range":[39585,41317],"filename":"Logger.js","lineno":567,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100004433","name":"Logger.log","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish Log message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.log(options, ...content) or logger.log(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.log()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.log(options, 'Some text', 'More text', 'And even more text!!!');\r logger.log('Or just stock options');"],"name":"log","longname":"Logger.log","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.log","$kind":"method","$docmaLink":"/api/#Logger.log"},{"comment":"/**\r\n   * An array with all the logger logging history\r\n   * @returns {Array} All the logger logs\r\n   * @readonly\r\n   */","meta":{"range":[42714,42762],"filename":"Logger.js","lineno":634,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100004856","name":"Logger.logs","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"An array with all the logger logging history","returns":[{"type":{"names":["Array"]},"description":"All the logger logs"}],"readonly":true,"name":"logs","longname":"Logger.logs","kind":"member","memberof":"Logger","scope":"static","params":[],"$longname":"Logger.logs","$kind":"property","$docmaLink":"/api/#Logger.logs"},{"comment":"/**\r\n   * A list of all the logger methods\r\n   * @returns {Array} All the logger methods\r\n   * @readonly\r\n   */","meta":{"range":[42365,42413],"filename":"Logger.js","lineno":616,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100004844","name":"Logger.methods","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"A list of all the logger methods","returns":[{"type":{"names":["Array"]},"description":"All the logger methods"}],"readonly":true,"name":"methods","longname":"Logger.methods","kind":"member","memberof":"Logger","scope":"static","params":[],"$longname":"Logger.methods","$kind":"property","$docmaLink":"/api/#Logger.methods"},{"comment":"/**\r\n   * Listen to a logger event\r\n   * @param {string | symbol} event The event name to listen to\r\n   * @param {...any} args Functions to run when the event is triggered\r\n   * @returns {emitter} Returns the EventEmitter Class\r\n   */","meta":{"range":[42029,42244],"filename":"Logger.js","lineno":605,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100004809","name":"Logger.on","type":"MethodDefinition","paramnames":["event","args"]},"vars":{"":null}},"description":"Listen to a logger event","params":[{"type":{"names":["string","symbol"]},"description":"The event name to listen to","name":"event"},{"type":{"names":["any"]},"variable":true,"description":"Functions to run when the event is triggered","name":"args"}],"returns":[{"type":{"names":["emitter"]},"description":"Returns the EventEmitter Class"}],"name":"on","longname":"Logger.on","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.on","$kind":"method","$docmaLink":"/api/#Logger.on"},{"comment":"/**\r\n   * Listen once to a logger event\r\n   * @param {String | Symbol} event The event name to listen to\r\n   * @param {...any} args Functions to run when the event is triggered\r\n   * @returns {emitter} Returns the EventEmitter Class\r\n   */","meta":{"range":[41566,41785],"filename":"Logger.js","lineno":593,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100004774","name":"Logger.once","type":"MethodDefinition","paramnames":["event","args"]},"vars":{"":null}},"description":"Listen once to a logger event","params":[{"type":{"names":["String","Symbol"]},"description":"The event name to listen to","name":"event"},{"type":{"names":["any"]},"variable":true,"description":"Functions to run when the event is triggered","name":"args"}],"returns":[{"type":{"names":["emitter"]},"description":"Returns the EventEmitter Class"}],"name":"once","longname":"Logger.once","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.once","$kind":"method","$docmaLink":"/api/#Logger.once"},{"comment":"/**\r\n   * Logging a stylish Success message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.success(options, ...content) or logger.success(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.success()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.success(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.success('Or just stock options');\r\n   */","meta":{"range":[9235,10985],"filename":"Logger.js","lineno":164,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100001425","name":"Logger.success","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish Success message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.success(options, ...content) or logger.success(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.success()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.success(options, 'Some text', 'More text', 'And even more text!!!');\r logger.success('Or just stock options');"],"name":"success","longname":"Logger.success","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.success","$kind":"method","$docmaLink":"/api/#Logger.success"},{"comment":"/**\r\n   * Logging a stylish Trace message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.trace(options, ...content) or logger.trace(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.trace()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.trace(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.trace('Or just stock options');\r\n   */","meta":{"range":[16278,18022],"filename":"Logger.js","lineno":258,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100002107","name":"Logger.trace","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish Trace message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.trace(options, ...content) or logger.trace(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.trace()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.trace(options, 'Some text', 'More text', 'And even more text!!!');\r logger.trace('Or just stock options');"],"name":"trace","longname":"Logger.trace","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.trace","$kind":"method","$docmaLink":"/api/#Logger.trace"},{"comment":"/**\r\n   * Logging a stylish Warning message to the console\r\n   * @param {Object} [options] The options object to use with this method\r\n   * @see {@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information\r\n   * @param {String} [options.background] A string value that indicates the background color name.\r\n   * @param {String} [options.color] A string value that indicates the color name.\r\n   * @param {String} [options.style] A string value that indicates the style name.\r\n   * @param {String} [options.type] A string value that indicates the console type. (NodeJS 'console' methods)\r\n   * @param {(Boolean | String)} [options.time] A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.\r\n   * @param {(Boolean | String)} [options.tag] A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.\r\n   * @param {Function} [options.format] A function that returns a string value that indicates the order of the time, tag and content.\r\n   * @param {...any} args Either the content or the options and the content to log into the console. logger.warn(options, ...content) or logger.warn(...content)\r\n   * @returns {Logger} The Logger class\r\n   * @example <caption>Example usage of 'Logger.warn()' method.</caption>\r\n   *  const { logger } = require('tools-kit');\r\n   *  const options = {\r\n   *    background: 'black',\r\n   *    color: 'green',\r\n   *    style: 'bold',\r\n   *    type: 'log',\r\n   *    time: true,\r\n   *    tag: 'CUSTOM OPTIONS'\r\n   *  };\r\n   *\r\n   *  logger.warn(options, 'Some text', 'More text', 'And even more text!!!');\r\n   *  logger.warn('Or just stock options');\r\n   */","meta":{"range":[30334,32076],"filename":"Logger.js","lineno":446,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100003471","name":"Logger.warn","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Logging a stylish Warning message to the console","params":[{"type":{"names":["Object"]},"optional":true,"description":"The options object to use with this method","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the background color name.","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the color name.","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the style name.","name":"options.style"},{"type":{"names":["String"]},"optional":true,"description":"A string value that indicates the console type. (NodeJS 'console' methods)","name":"options.type"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a time format (moment package format), or a boolean value that indicates if to use a default time format.","name":"options.time"},{"type":{"names":["Boolean","String"]},"optional":true,"description":"A string value that indicates a tag name, or a boolean value that indicates if to use a tag when logging.","name":"options.tag"},{"type":{"names":["function"]},"optional":true,"description":"A function that returns a string value that indicates the order of the time, tag and content.","name":"options.format"},{"type":{"names":["any"]},"variable":true,"description":"Either the content or the options and the content to log into the console. logger.warn(options, ...content) or logger.warn(...content)","name":"args"}],"see":["{@link https://www.npmjs.com/package/tools-kit|https://www.npmjs.com/package/tools-kit} For more information"],"returns":[{"type":{"names":["Logger"]},"description":"The Logger class"}],"examples":["<caption>Example usage of 'Logger.warn()' method.</caption>\r const { logger } = require('tools-kit');\r const options = {\r   background: 'black',\r   color: 'green',\r   style: 'bold',\r   type: 'log',\r   time: true,\r   tag: 'CUSTOM OPTIONS'\r };\r\r logger.warn(options, 'Some text', 'More text', 'And even more text!!!');\r logger.warn('Or just stock options');"],"name":"warn","longname":"Logger.warn","kind":"function","memberof":"Logger","scope":"static","$longname":"Logger.warn","$kind":"method","$docmaLink":"/api/#Logger.warn"}]},{"comment":"/**\r\n   * The package version\r\n   * @returns {String} The package version\r\n   */","meta":{"range":[1027,1042],"filename":"index.js","lineno":45,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit","code":{"id":"astnode100007124","name":"name","type":"MemberExpression","value":"Kit.pName"}},"description":"The package version","returns":[{"type":{"names":["String"]},"description":"The package version"}],"name":"name","longname":"module.exports.name","kind":"member","memberof":"module.exports","scope":"static","$longname":"module.exports.name","$kind":"property","$docmaLink":"/api/#module.exports.name"},{"comment":"/**\r\n   * The package name\r\n   * @returns {String} The package name\r\n   */","meta":{"range":[1125,1146],"filename":"index.js","lineno":50,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit","code":{"id":"astnode100007128","name":"version","type":"MemberExpression","value":"Kit.pVersion"}},"description":"The package name","returns":[{"type":{"names":["String"]},"description":"The package name"}],"name":"version","longname":"module.exports.version","kind":"member","memberof":"module.exports","scope":"static","$longname":"module.exports.version","$kind":"property","$docmaLink":"/api/#module.exports.version"},{"comment":"/**\r\n * The package Utilities\r\n */","meta":{"range":[1480,18602],"filename":"Styles.js","lineno":69,"columnno":0,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005091","name":"Styles","type":"ClassDeclaration","paramnames":[]}},"classdesc":"The package Utilities","name":"Styles","longname":"Styles","kind":"class","scope":"global","$longname":"Styles","$kind":"class","$docmaLink":"/api/#Styles","$members":[{"comment":"/**\r\n   * Converts any ANSI16 values into ANSI Escape Code value\r\n   * @param {String | Number} ansi16 The ANSI16 values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[12630,12930],"filename":"Styles.js","lineno":254,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006185","name":"Styles.ansi16","type":"MethodDefinition","paramnames":["ansi16","type"]},"vars":{"":null}},"description":"Converts any ANSI16 values into ANSI Escape Code value","params":[{"type":{"names":["String","Number"]},"description":"The ANSI16 values to convert into ANSI Escape Code value","name":"ansi16"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"ansi16","longname":"Styles.ansi16","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.ansi16","$kind":"method","$docmaLink":"/api/#Styles.ansi16"},{"comment":"/**\r\n   * Converts any ANSI256 values into ANSI Escape Code value\r\n   * @param {String | Number} ansi256 The ANSI256 values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[13275,13587],"filename":"Styles.js","lineno":267,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006227","name":"Styles.ansi256","type":"MethodDefinition","paramnames":["ansi256","type"]},"vars":{"":null}},"description":"Converts any ANSI256 values into ANSI Escape Code value","params":[{"type":{"names":["String","Number"]},"description":"The ANSI256 values to convert into ANSI Escape Code value","name":"ansi256"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"ansi256","longname":"Styles.ansi256","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.ansi256","$kind":"method","$docmaLink":"/api/#Styles.ansi256"},{"comment":"/**\r\n   * Style the supplied text\r\n   * @param {String} name The background color name to apply to the text\r\n   * @param {...any} args The content to apply the style to\r\n   * @returns {String} The styled text\r\n   */","meta":{"range":[14556,14787],"filename":"Styles.js","lineno":297,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006329","name":"Styles.background","type":"MethodDefinition","paramnames":["name","args"]},"vars":{"":null}},"description":"Style the supplied text","params":[{"type":{"names":["String"]},"description":"The background color name to apply to the text","name":"name"},{"type":{"names":["any"]},"variable":true,"description":"The content to apply the style to","name":"args"}],"returns":[{"type":{"names":["String"]},"description":"The styled text"}],"name":"background","longname":"Styles.background","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.background","$kind":"method","$docmaLink":"/api/#Styles.background"},{"comment":"/**\r\n   * Converts any CMYK values into ANSI Escape Code value\r\n   * @param {Array} cmyk The CMYK values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[11302,12288],"filename":"Styles.js","lineno":235,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006051","name":"Styles.cmyk","type":"MethodDefinition","paramnames":["cmyk","type"]},"vars":{"":null}},"description":"Converts any CMYK values into ANSI Escape Code value","params":[{"type":{"names":["Array"]},"description":"The CMYK values to convert into ANSI Escape Code value","name":"cmyk"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"cmyk","longname":"Styles.cmyk","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.cmyk","$kind":"method","$docmaLink":"/api/#Styles.cmyk"},{"comment":"/**\r\n   * Style the supplied text\r\n   * @param {String} name The color name to apply to the text\r\n   * @param {...any} args The content to apply the style to\r\n   * @returns {String} The styled text\r\n   */","meta":{"range":[15001,15202],"filename":"Styles.js","lineno":311,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006368","name":"Styles.color","type":"MethodDefinition","paramnames":["name","args"]},"vars":{"":null}},"description":"Style the supplied text","params":[{"type":{"names":["String"]},"description":"The color name to apply to the text","name":"name"},{"type":{"names":["any"]},"variable":true,"description":"The content to apply the style to","name":"args"}],"returns":[{"type":{"names":["String"]},"description":"The styled text"}],"name":"color","longname":"Styles.color","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.color","$kind":"method","$docmaLink":"/api/#Styles.color"},{"comment":"/**\r\n   * Converts any Hex value into ANSI Escape Code value\r\n   * @param {String} hex The Hex value to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[3628,4004],"filename":"Styles.js","lineno":111,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005295","name":"Styles.hex","type":"MethodDefinition","paramnames":["hex","type"]},"vars":{"":null}},"description":"Converts any Hex value into ANSI Escape Code value","params":[{"type":{"names":["String"]},"description":"The Hex value to convert into ANSI Escape Code value","name":"hex"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"hex","longname":"Styles.hex","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.hex","$kind":"method","$docmaLink":"/api/#Styles.hex"},{"comment":"/**\r\n   * Converts any HSL values into ANSI Escape Code value\r\n   * @param {Array} hsl The HSL values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[5487,6324],"filename":"Styles.js","lineno":145,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005469","name":"Styles.hsl","type":"MethodDefinition","paramnames":["hsl","type"]},"vars":{"":null}},"description":"Converts any HSL values into ANSI Escape Code value","params":[{"type":{"names":["Array"]},"description":"The HSL values to convert into ANSI Escape Code value","name":"hsl"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"hsl","longname":"Styles.hsl","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.hsl","$kind":"method","$docmaLink":"/api/#Styles.hsl"},{"comment":"/**\r\n   * Converts any HSV values into ANSI Escape Code value\r\n   * @param {Array} hsv The HSV values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[4327,5164],"filename":"Styles.js","lineno":127,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005353","name":"Styles.hsv","type":"MethodDefinition","paramnames":["hsv","type"]},"vars":{"":null}},"description":"Converts any HSV values into ANSI Escape Code value","params":[{"type":{"names":["Array"]},"description":"The HSV values to convert into ANSI Escape Code value","name":"hsv"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"hsv","longname":"Styles.hsv","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.hsv","$kind":"method","$docmaLink":"/api/#Styles.hsv"},{"comment":"/**\r\n   * Converts any HWB values into ANSI Escape Code value\r\n   * @param {Array} hwb The HWB values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[6647,7484],"filename":"Styles.js","lineno":163,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005585","name":"Styles.hwb","type":"MethodDefinition","paramnames":["hwb","type"]},"vars":{"":null}},"description":"Converts any HWB values into ANSI Escape Code value","params":[{"type":{"names":["Array"]},"description":"The HWB values to convert into ANSI Escape Code value","name":"hwb"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"hwb","longname":"Styles.hwb","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.hwb","$kind":"method","$docmaLink":"/api/#Styles.hwb"},{"comment":"/**\r\n   * Converts any CSS color name keyword into ANSI Escape Code value\r\n   * @param {String} keyword The CSS color name keyword to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[13939,14331],"filename":"Styles.js","lineno":280,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006269","name":"Styles.keyword","type":"MethodDefinition","paramnames":["keyword","type"]},"vars":{"":null}},"description":"Converts any CSS color name keyword into ANSI Escape Code value","params":[{"type":{"names":["String"]},"description":"The CSS color name keyword to convert into ANSI Escape Code value","name":"keyword"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"keyword","longname":"Styles.keyword","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.keyword","$kind":"method","$docmaLink":"/api/#Styles.keyword"},{"comment":"/**\r\n   * Converts any LAB values into ANSI Escape Code value\r\n   * @param {Array} lab The LAB values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[7807,8656],"filename":"Styles.js","lineno":181,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005701","name":"Styles.lab","type":"MethodDefinition","paramnames":["lab","type"]},"vars":{"":null}},"description":"Converts any LAB values into ANSI Escape Code value","params":[{"type":{"names":["Array"]},"description":"The LAB values to convert into ANSI Escape Code value","name":"lab"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"lab","longname":"Styles.lab","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.lab","$kind":"method","$docmaLink":"/api/#Styles.lab"},{"comment":"/**\r\n   * Converts any LCH values into ANSI Escape Code value\r\n   * @param {Array} lch The LCH values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[10139,10976],"filename":"Styles.js","lineno":217,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005935","name":"Styles.lch","type":"MethodDefinition","paramnames":["lch","type"]},"vars":{"":null}},"description":"Converts any LCH values into ANSI Escape Code value","params":[{"type":{"names":["Array"]},"description":"The LCH values to convert into ANSI Escape Code value","name":"lch"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"lch","longname":"Styles.lch","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.lch","$kind":"method","$docmaLink":"/api/#Styles.lch"},{"comment":"/**\r\n   * Returns a customized-colored letters\r\n   * @param {String} text Text to customize with the supplied colors\r\n   * @param {Array} colors Colors to customize the text with\r\n   * @param {Number} [after] Start from the first color after certain number of letters\r\n   * @returns {String} The transformed text\r\n   */","meta":{"range":[16966,17534],"filename":"Styles.js","lineno":363,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006541","name":"Styles.map","type":"MethodDefinition","paramnames":["text","colors","after"]},"vars":{"":null}},"description":"Returns a customized-colored letters","params":[{"type":{"names":["String"]},"description":"Text to customize with the supplied colors","name":"text"},{"type":{"names":["Array"]},"description":"Colors to customize the text with","name":"colors"},{"type":{"names":["Number"]},"optional":true,"description":"Start from the first color after certain number of letters","name":"after"}],"returns":[{"type":{"names":["String"]},"description":"The transformed text"}],"name":"map","longname":"Styles.map","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.map","$kind":"method","$docmaLink":"/api/#Styles.map"},{"comment":"/**\r\n   * Returns a rainbow-colored letters\r\n   * @param {...any} args The content to apply the style to\r\n   * @returns {String} The transformed text\r\n   */","meta":{"range":[17700,17914],"filename":"Styles.js","lineno":382,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006636","name":"Styles.rainbow","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Returns a rainbow-colored letters","params":[{"type":{"names":["any"]},"variable":true,"description":"The content to apply the style to","name":"args"}],"returns":[{"type":{"names":["String"]},"description":"The transformed text"}],"name":"rainbow","longname":"Styles.rainbow","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.rainbow","$kind":"method","$docmaLink":"/api/#Styles.rainbow"},{"comment":"/**\r\n   * Returns a random-colored letters\r\n   * @param {...any} args The content to apply the style to\r\n   * @returns {String} The transformed text\r\n   */","meta":{"range":[18079,18286],"filename":"Styles.js","lineno":393,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006677","name":"Styles.random","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Returns a random-colored letters","params":[{"type":{"names":["any"]},"variable":true,"description":"The content to apply the style to","name":"args"}],"returns":[{"type":{"names":["String"]},"description":"The transformed text"}],"name":"random","longname":"Styles.random","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.random","$kind":"method","$docmaLink":"/api/#Styles.random"},{"comment":"/**\r\n   * Converts any RGB values into ANSI Escape Code value\r\n   * @param {Array} rgb The RGB values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[2477,3306],"filename":"Styles.js","lineno":93,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005185","name":"Styles.rgb","type":"MethodDefinition","paramnames":["rgb","type"]},"vars":{"":null}},"description":"Converts any RGB values into ANSI Escape Code value","params":[{"type":{"names":["Array"]},"description":"The RGB values to convert into ANSI Escape Code value","name":"rgb"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"rgb","longname":"Styles.rgb","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.rgb","$kind":"method","$docmaLink":"/api/#Styles.rgb"},{"comment":"/**\r\n   * Style the supplied text\r\n   * @param {String} name The style name to apply to the text\r\n   * @param {...any} args The content to apply the style to\r\n   * @returns {String} The styled text\r\n   */","meta":{"range":[15416,15617],"filename":"Styles.js","lineno":325,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006407","name":"Styles.style","type":"MethodDefinition","paramnames":["name","args"]},"vars":{"":null}},"description":"Style the supplied text","params":[{"type":{"names":["String"]},"description":"The style name to apply to the text","name":"name"},{"type":{"names":["any"]},"variable":true,"description":"The content to apply the style to","name":"args"}],"returns":[{"type":{"names":["String"]},"description":"The styled text"}],"name":"style","longname":"Styles.style","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.style","$kind":"method","$docmaLink":"/api/#Styles.style"},{"comment":"/**\r\n   * Style the supplied text\r\n   * @param {Object} options An Object with style properties\r\n   * @param {String} [options.background] The background color name to apply to the text\r\n   * @param {String} [options.color] The color name to apply to the text\r\n   * @param {String} [options.style] The style name to apply to the text\r\n   * @param {...any} args The content to apply the style to\r\n   * @returns {String} The styled text\r\n   */","meta":{"range":[16068,16637],"filename":"Styles.js","lineno":342,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006446","name":"Styles.stylify","type":"MethodDefinition","paramnames":["options","args"]},"vars":{"":null}},"description":"Style the supplied text","params":[{"type":{"names":["Object"]},"description":"An Object with style properties","name":"options"},{"type":{"names":["String"]},"optional":true,"description":"The background color name to apply to the text","name":"options.background"},{"type":{"names":["String"]},"optional":true,"description":"The color name to apply to the text","name":"options.color"},{"type":{"names":["String"]},"optional":true,"description":"The style name to apply to the text","name":"options.style"},{"type":{"names":["any"]},"variable":true,"description":"The content to apply the style to","name":"args"}],"returns":[{"type":{"names":["String"]},"description":"The styled text"}],"name":"stylify","longname":"Styles.stylify","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.stylify","$kind":"method","$docmaLink":"/api/#Styles.stylify"},{"comment":"/**\r\n   * Converts any XYZ values into ANSI Escape Code value\r\n   * @param {Array} xyz The XYZ values to convert into ANSI Escape Code value\r\n   * @param {String} [type] The type of the ANSI Escape Code to return either color or background value\r\n   * @returns {String} ANSI Escape Code to use when logging\r\n   */","meta":{"range":[8979,9816],"filename":"Styles.js","lineno":199,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100005819","name":"Styles.xyz","type":"MethodDefinition","paramnames":["xyz","type"]},"vars":{"":null}},"description":"Converts any XYZ values into ANSI Escape Code value","params":[{"type":{"names":["Array"]},"description":"The XYZ values to convert into ANSI Escape Code value","name":"xyz"},{"type":{"names":["String"]},"optional":true,"description":"The type of the ANSI Escape Code to return either color or background value","name":"type"}],"returns":[{"type":{"names":["String"]},"description":"ANSI Escape Code to use when logging"}],"name":"xyz","longname":"Styles.xyz","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.xyz","$kind":"method","$docmaLink":"/api/#Styles.xyz"},{"comment":"/**\r\n   * Returns an inverse-colored letters\r\n   * @param {...any} args The content to apply the style to\r\n   * @returns {String} The transformed text\r\n   */","meta":{"range":[18453,18599],"filename":"Styles.js","lineno":404,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Managers","code":{"id":"astnode100006718","name":"Styles.zebra","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"Returns an inverse-colored letters","params":[{"type":{"names":["any"]},"variable":true,"description":"The content to apply the style to","name":"args"}],"returns":[{"type":{"names":["String"]},"description":"The transformed text"}],"name":"zebra","longname":"Styles.zebra","kind":"function","memberof":"Styles","scope":"static","$longname":"Styles.zebra","$kind":"method","$docmaLink":"/api/#Styles.zebra"}]},{"comment":"/**\r\n * The package Utilities\r\n */","meta":{"range":[220,3229],"filename":"Util.js","lineno":9,"columnno":0,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Utilities","code":{"id":"astnode100006761","name":"Util","type":"ClassDeclaration","paramnames":[]}},"classdesc":"The package Utilities","name":"Util","longname":"Util","kind":"class","scope":"global","$longname":"Util","$kind":"class","$docmaLink":"/api/#Util","$members":[{"comment":"/**\r\n   * Checks if the Object or the Array has the property or the property value\r\n   * @param {Object | Array} object Either an Object or an Array\r\n   * @param {String | Number | Symbol} property The property to check for\r\n   * @param {String | Number | Symbol} value The property value to check for\r\n   * @returns {Boolean | Error} Either true or false\r\n   */","meta":{"range":[602,1337],"filename":"Util.js","lineno":17,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Utilities","code":{"id":"astnode100006764","name":"Util.has","type":"MethodDefinition","paramnames":["object","property","value"]},"vars":{"":null}},"description":"Checks if the Object or the Array has the property or the property value","params":[{"type":{"names":["Object","Array"]},"description":"Either an Object or an Array","name":"object"},{"type":{"names":["String","Number","Symbol"]},"description":"The property to check for","name":"property"},{"type":{"names":["String","Number","Symbol"]},"description":"The property value to check for","name":"value"}],"returns":[{"type":{"names":["Boolean","Error"]},"description":"Either true or false"}],"name":"has","longname":"Util.has","kind":"function","memberof":"Util","scope":"static","$longname":"Util.has","$kind":"method","$docmaLink":"/api/#Util.has"},{"comment":"/**\r\n   * Checks if an Object is an Array\r\n   * @param {Object} object An Object to check\r\n   * @returns {Boolean} Either true or false\r\n   */","meta":{"range":[1828,1904],"filename":"Util.js","lineno":41,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Utilities","code":{"id":"astnode100006924","name":"Util.isArray","type":"MethodDefinition","paramnames":["object"]},"vars":{"":null}},"description":"Checks if an Object is an Array","params":[{"type":{"names":["Object"]},"description":"An Object to check","name":"object"}],"returns":[{"type":{"names":["Boolean"]},"description":"Either true or false"}],"name":"isArray","longname":"Util.isArray","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isArray","$kind":"method","$docmaLink":"/api/#Util.isArray"},{"comment":"/**\r\n   * Checks if an Object is a real Object\r\n   * @param {Object} object An Object to check\r\n   * @returns {Boolean} Either true or false\r\n   */","meta":{"range":[1494,1676],"filename":"Util.js","lineno":32,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Utilities","code":{"id":"astnode100006891","name":"Util.isObject","type":"MethodDefinition","paramnames":["object"]},"vars":{"":null}},"description":"Checks if an Object is a real Object","params":[{"type":{"names":["Object"]},"description":"An Object to check","name":"object"}],"returns":[{"type":{"names":["Boolean"]},"description":"Either true or false"}],"name":"isObject","longname":"Util.isObject","kind":"function","memberof":"Util","scope":"static","$longname":"Util.isObject","$kind":"method","$docmaLink":"/api/#Util.isObject"},{"comment":"/**\r\n   * Returns a random item from an Array\r\n   * @param {Array} array An Array to random an item from\r\n   * @returns {Any | Error} The random item\r\n   */","meta":{"range":[2070,2381],"filename":"Util.js","lineno":50,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Utilities","code":{"id":"astnode100006939","name":"Util.randomItem","type":"MethodDefinition","paramnames":["array"]},"vars":{"":null}},"description":"Returns a random item from an Array","params":[{"type":{"names":["Array"]},"description":"An Array to random an item from","name":"array"}],"returns":[{"type":{"names":["Any","Error"]},"description":"The random item"}],"name":"randomItem","longname":"Util.randomItem","kind":"function","memberof":"Util","scope":"static","$longname":"Util.randomItem","$kind":"method","$docmaLink":"/api/#Util.randomItem"},{"comment":"/**\r\n   * Returns a random number between the minimum value to the maximum value supplied\r\n   * @param {Number} minimum Minimum value\r\n   * @param {Number} maximum Maximum value\r\n   * @param {Boolean} [round] If to return a rounded number - Set to true by default\r\n   * @returns {Number | Error} The random number\r\n   */","meta":{"range":[2711,3226],"filename":"Util.js","lineno":64,"columnno":2,"path":"C:\\Users\\danie\\Git\\tools-kit\\lib\\Utilities","code":{"id":"astnode100006984","name":"Util.randomNumber","type":"MethodDefinition","paramnames":["minimum","maximum","round"]},"vars":{"":null}},"description":"Returns a random number between the minimum value to the maximum value supplied","params":[{"type":{"names":["Number"]},"description":"Minimum value","name":"minimum"},{"type":{"names":["Number"]},"description":"Maximum value","name":"maximum"},{"type":{"names":["Boolean"]},"optional":true,"description":"If to return a rounded number - Set to true by default","name":"round"}],"returns":[{"type":{"names":["Number","Error"]},"description":"The random number"}],"name":"randomNumber","longname":"Util.randomNumber","kind":"function","memberof":"Util","scope":"static","$longname":"Util.randomNumber","$kind":"method","$docmaLink":"/api/#Util.randomNumber"}]}],"symbols":["Hastebin","Hastebin.get","Hastebin.post","Kit","Logger","Logger.debug","Logger.error","Logger.events","Logger.fatal","Logger.figlet","Logger.important","Logger.info","Logger.log","Logger.logs","Logger.methods","Logger.on","Logger.once","Logger.success","Logger.trace","Logger.warn","module.exports.name","module.exports.version","Styles","Styles.ansi16","Styles.ansi256","Styles.background","Styles.cmyk","Styles.color","Styles.hex","Styles.hsl","Styles.hsv","Styles.hwb","Styles.keyword","Styles.lab","Styles.lch","Styles.map","Styles.rainbow","Styles.random","Styles.rgb","Styles.style","Styles.stylify","Styles.xyz","Styles.zebra","Util","Util.has","Util.isArray","Util.isObject","Util.randomItem","Util.randomNumber"]}},"app":{"title":"Tools-Kit","server":"github","routing":{"method":"path","caseSensitive":true},"entrance":"content:readme","favicon":"./docs/img/logo.ico","meta":null,"base":""},"template":{"name":"docma-template-zebra","description":"Zebra - Default template for Docma. https://github.com/onury/docma","version":"2.3.1","supportedDocmaVersion":">=2.0.0","author":"Onur Yıldırım","license":"MIT","mainHTML":"index.html","options":{"title":{"label":"Tools-Kit","href":"/"},"logo":{"dark":"./img/logo-dark.png","light":"./img/logo-light.png"},"sidebar":{"enabled":true,"collapsed":false,"outline":"tree","toolbar":true,"itemsFolded":true,"itemsOverflow":"crop","badges":true,"search":true,"animations":true},"navbar":{"enabled":true,"fixed":true,"dark":false,"animations":true,"menu":[{"iconClass":"fas fa-book","label":"Docs","items":[{"label":"Tools-Kit Docs","href":"api"},{"separator":true},{"label":"Read Me","href":"readme"},{"label":"Change Log","href":"changelog"},{"separator":true},{"label":"License","href":"license"}],"chevron":true},{"iconClass":"fas fa-cloud-download-alt","label":"Download","items":[{"label":"npm i tools-kit","href":"https://www.npmjs.com/package/tools-kit","target":"_blank"},{"label":"Tools-Kit Releases","href":"https://github.com/BlackB1RD-Development/tools-kit/releases","target":"_blank"}],"chevron":true},{"iconClass":"fab fa-lg fa-discord","label":"","href":"https://discordapp.com/invite/WgXpB9g","target":"_blank"},{"iconClass":"fab fa-lg fa-github","label":"","href":"https://github.com/BlackB1RD-Development/tools-kit","target":"_blank"},{"iconClass":"fab fa-lg fa-npm","label":"","href":"https://www.npmjs.com/package/tools-kit","target":"_blank"}]},"symbols":{"autoLink":true,"params":"list","enums":"list","props":"list","meta":false},"contentView":{"bookmarks":false,"faVersion":"5.5.0","faLibs":"all"}}},"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","defaultApiName":"_def_","logsEnabled":false}));

!function(){"use strict";var n="path"===docma.app.routing.method;docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),n&&(page("(/)?api/:apiName?",function(a,e){a=a.params.apiName||docma._.defaultApiName,a=docma.createRoute(a,DocmaWeb.Route.Type.API);if(!a||!a.exists())return e();a.apply()}),page("(/)?:content",function(a,e){a=a.params.content,a=docma.createRoute(a,DocmaWeb.Route.Type.CONTENT);if(!a||!a.exists())return e();a.apply()})),page("(/)?",function(o,t){!function(){if(n){var a=sessionStorage.getItem("redirectPath")||null;if(a)return sessionStorage.removeItem("redirectPath"),docma.info("Redirecting to:",a),page.redirect(a),1}}()&&setTimeout(function(){var a,e=(e=(e=o.querystring)||window.location.search,(e=/^[?&]/.test(e)?e.slice(1):e)||null);if(n){if(e)return t();a=docma._.appEntranceRI}else docma.log("Query-string:",e),a=e?docma.createRouteFromQuery(e):docma._.appEntranceRI;e=!a||!a.exists();if(docma._trigger(DocmaWeb.Event.Navigate,[e?null:a]),e)return t();a.isCurrent()||a.apply()},100)}),page("*",function(a){docma.warn("Unknown Route:",a.path),docma.createRoute(null).apply()}),docma.info("Docma SPA Configuration:"),docma.info("App Title:          ",docma.app.title),docma.info("Routing Method:     ",docma.app.routing.method),docma.info("App Server:         ",docma.app.server),docma.info("Base Path:          ",docma.app.base),docma.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){docma._.initialLoad=!0,docma._.appEntranceRI=docma.createRouteFromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),docma.info("Docma SPA loaded!")}}();